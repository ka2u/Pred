.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::IOLoop 3"
.TH Mojo::IOLoop 3 "2010-01-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::IOLoop \- IO Loop
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mojo::IOLoop;
\&
\&    # Create loop
\&    my $loop = Mojo::IOLoop\->new;
\&
\&    # Listen on port 3000
\&    $loop\->listen(
\&        port => 3000,
\&        cb   => sub {
\&            my ($self, $id) = @_;
\&
\&            # Incoming data
\&            $self\->read_cb($id => sub {
\&                my ($self, $id, $chunk) = @_;
\&
\&                # Got some data, time to write
\&                $self\->writing($id);
\&            });
\&
\&            # Ready to write
\&            $self\->write_cb($id => sub {
\&                my ($self, $id) = @_;
\&
\&                # Back to reading only
\&                $self\->not_writing($id);
\&
\&                # The loop will take care of buffering for us
\&                return \*(AqHTTP/1.1 200 OK\*(Aq;
\&            });
\&        }
\&    );
\&
\&    # Connect to port 3000 with TLS activated
\&    my $id = $loop\->connect(address => \*(Aqlocalhost\*(Aq, port => 3000, tls => 1);
\&
\&    # Loop starts writing
\&    $loop\->writing($id);
\&
\&    # Writing request
\&    $loop\->write_cb($id => sub {
\&        my ($self, $id) = @_;
\&
\&        # Back to reading only
\&        $self\->not_writing($id);
\&
\&        # The loop will take care of buffering for us
\&        return "GET / HTTP/1.1\er\en\er\en";
\&    });
\&
\&    # Reading response
\&    $loop\->read_cb($id => sub {
\&        my ($self, $id, $chunk) = @_;
\&
\&        # Time to write more
\&        $self\->writing($id);
\&    });
\&
\&    # Add a timer
\&    $loop\->timer($id => (after => 5, cb => sub {
\&        my ($self, $tid, $cid) = @_;
\&        $self\->drop($cid);
\&    }));
\&
\&    # Add another timer
\&    $loop\->timer($id => (interval => 3, cb => sub {
\&        print "Timer is running again!\en";
\&    }));
\&
\&    # Start and stop loop
\&    $loop\->start;
\&    $loop\->stop;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::IOLoop is a general purpose \s-1IO\s0 loop for \s-1TCP\s0 clients and servers,
easy to subclass and extend.
IO::Poll, IO::KQueue, IO::Epoll, IO::Socket::INET6 and
IO::Socket::SSL are supported transparently.
.SS "\s-1ATTRIBUTES\s0"
.IX Subsection "ATTRIBUTES"
Mojo::IOLoop implements the following attributes.
.ie n .SS """accept_timeout"""
.el .SS "\f(CWaccept_timeout\fP"
.IX Subsection "accept_timeout"
.Vb 2
\&    my $timeout = $loop\->accept_timeout;
\&    $loop       = $loop\->accept_timeout(5);
.Ve
.PP
Maximum time in seconds a connection can take to be accepted before being
dropped, defaults to \f(CW5\fR.
.ie n .SS """connect_timeout"""
.el .SS "\f(CWconnect_timeout\fP"
.IX Subsection "connect_timeout"
.Vb 2
\&    my $timeout = $loop\->connect_timeout;
\&    $loop       = $loop\->connect_timeout(5);
.Ve
.PP
Maximum time in seconds a conenction can take to be connected before being
dropped, defaults to \f(CW5\fR.
.ie n .SS """lock_cb"""
.el .SS "\f(CWlock_cb\fP"
.IX Subsection "lock_cb"
.Vb 2
\&    my $cb = $loop\->lock_cb;
\&    $loop  = $loop\->lock_cb(sub { ... });
.Ve
.PP
A locking callback that decides if this loop is allowed to listen for new
incoming connections, used to sync multiple server processes.
.ie n .SS """max_connections"""
.el .SS "\f(CWmax_connections\fP"
.IX Subsection "max_connections"
.Vb 2
\&    my $max = $loop\->max_connections;
\&    $loop   = $loop\->max_connections(1000);
.Ve
.PP
The maximum number of connections this loop is allowed to handle before
stopping to accept new incoming connections, defaults to \f(CW1000\fR.
.ie n .SS """unlock_cb"""
.el .SS "\f(CWunlock_cb\fP"
.IX Subsection "unlock_cb"
.Vb 2
\&    my $cb = $loop\->unlock_cb;
\&    $loop  = $loop\->unlock_cb(sub { ... });
.Ve
.PP
A callback to free the listen lock, called after accepting a new connection
and used to sync multiple server processes.
.ie n .SS """timeout"""
.el .SS "\f(CWtimeout\fP"
.IX Subsection "timeout"
.Vb 2
\&    my $timeout = $loop\->timeout;
\&    $loop       = $loop\->timeout(5);
.Ve
.PP
Maximum time in seconds our loop waits for new events to happen, defaults to
\&\f(CW0.25\fR.
.SH "METHODS"
.IX Header "METHODS"
Mojo::IOLoop inherits all methods from Mojo::Base and implements the
following new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&    my $loop = Mojo::IOLoop\->new;
.Ve
.PP
Construct a new Mojo::IOLoop object.
Multiple of these will block each other, so use \f(CW\*(C`singleton\*(C'\fR instead if
possible.
.ie n .SS """connect"""
.el .SS "\f(CWconnect\fP"
.IX Subsection "connect"
.Vb 10
\&    my $id = $loop\->connect(
\&        address => \*(Aq127.0.0.1\*(Aq,
\&        port    => 3000,
\&        cb      => sub {...}
\&    );
\&    my $id = $loop\->connect({
\&        address => \*(Aq127.0.0.1\*(Aq,
\&        port    => 3000,
\&        cb      => sub {...}
\&    });
\&    my $id = $loop\->connect({
\&        address => \*(Aq[::1]\*(Aq,
\&        port    => 443,
\&        tls     => 1,
\&        cb      => sub {...}
\&    });
.Ve
.PP
Open a \s-1TCP\s0 connection to a remote host.
IPv6 support depends on IO::Socket::INET6 and \s-1TLS\s0 support on
IO::Socket::SSL.
.ie n .SS """connection_timeout"""
.el .SS "\f(CWconnection_timeout\fP"
.IX Subsection "connection_timeout"
.Vb 2
\&    my $timeout = $loop\->connection_timeout($id);
\&    $loop       = $loop\->connection_timeout($id => 45);
.Ve
.PP
Maximum amount of time in seconds a connection can be inactive before being
dropped.
.ie n .SS """drop"""
.el .SS "\f(CWdrop\fP"
.IX Subsection "drop"
.Vb 1
\&    $loop = $loop\->drop($id);
.Ve
.PP
Drop a connection, listen socket or timer immediately.
.ie n .SS """error_cb"""
.el .SS "\f(CWerror_cb\fP"
.IX Subsection "error_cb"
.Vb 1
\&    $loop = $loop\->error_cb($id => sub { ... });
.Ve
.PP
Callback to be invoked if an error event happens on the connection.
.ie n .SS """finish"""
.el .SS "\f(CWfinish\fP"
.IX Subsection "finish"
.Vb 1
\&    $loop = $loop\->finish($id);
.Ve
.PP
Drop a connection gracefully by allowing it to finish writing all data in
it's write buffer.
.ie n .SS """generate_port"""
.el .SS "\f(CWgenerate_port\fP"
.IX Subsection "generate_port"
.Vb 1
\&    my $port = $loop\->generate_port;
.Ve
.PP
Find a free \s-1TCP\s0 port.
.ie n .SS """hup_cb"""
.el .SS "\f(CWhup_cb\fP"
.IX Subsection "hup_cb"
.Vb 1
\&    $loop = $loop\->hup_cb($id => sub { ... });
.Ve
.PP
Callback to be invoked if the connection gets closed.
.ie n .SS """listen"""
.el .SS "\f(CWlisten\fP"
.IX Subsection "listen"
.Vb 9
\&    my $id = $loop\->listen(port => 3000);
\&    my $id = $loop\->listen({port => 3000});
\&    my $id = $loop\->listen(file => \*(Aq/foo/myapp.sock\*(Aq);
\&    my $id = $loop\->listen(
\&        port     => 443,
\&        tls      => 1,
\&        tls_cert => \*(Aq/foo/server.cert\*(Aq,
\&        tls_key  => \*(Aq/foo/server.key\*(Aq
\&    );
.Ve
.PP
Create a new listen socket.
IPv6 support depends on IO::Socket::INET6 and \s-1TLS\s0 support on
IO::Socket::SSL.
.ie n .SS """local_info"""
.el .SS "\f(CWlocal_info\fP"
.IX Subsection "local_info"
.Vb 1
\&    my $info = $loop\->local_info($id);
.Ve
.PP
Get local information about a connection.
.ie n .SS """not_writing"""
.el .SS "\f(CWnot_writing\fP"
.IX Subsection "not_writing"
.Vb 1
\&    $loop\->not_writing($id);
.Ve
.PP
Activate read only mode for a connection.
.ie n .SS """read_cb"""
.el .SS "\f(CWread_cb\fP"
.IX Subsection "read_cb"
.Vb 1
\&    $loop = $loop\->read_cb($id => sub { ... });
.Ve
.PP
Callback to be invoked if new data arrives on the connection.
.ie n .SS """remote_info"""
.el .SS "\f(CWremote_info\fP"
.IX Subsection "remote_info"
.Vb 1
\&    my $info = $loop\->remote_info($id);
.Ve
.PP
Get remote information about a connection.
.ie n .SS """shutdown"""
.el .SS "\f(CWshutdown\fP"
.IX Subsection "shutdown"
.Vb 1
\&    $loop\->shutdown;
.Ve
.PP
Stop the loop gracefully by not accepting any new connections but not
interrupting existing ones.
.ie n .SS """singleton"""
.el .SS "\f(CWsingleton\fP"
.IX Subsection "singleton"
.Vb 1
\&    my $loop = Mojo::IOLoop\->singleton;
.Ve
.PP
The global loop object.
.ie n .SS """start"""
.el .SS "\f(CWstart\fP"
.IX Subsection "start"
.Vb 1
\&    $loop\->start;
.Ve
.PP
Start the loop, this will block until the loop is finished.
.ie n .SS """stop"""
.el .SS "\f(CWstop\fP"
.IX Subsection "stop"
.Vb 1
\&    $loop\->stop;
.Ve
.PP
Stop the loop immediately.
.ie n .SS """timer"""
.el .SS "\f(CWtimer\fP"
.IX Subsection "timer"
.Vb 2
\&    my $id = $loop\->timer($id => (after => 5, cb => sub {...}));
\&    my $id = $loop\->timer($id => {interval => 5, cb => sub {...}}));
.Ve
.PP
Create a new timer, invoking the callback afer a given amount of seconds.
Note that timers are bound to connections and will get destroyed together
with them.
.ie n .SS """write_cb"""
.el .SS "\f(CWwrite_cb\fP"
.IX Subsection "write_cb"
.Vb 1
\&    $loop = $loop\->write_cb($id => sub { ... });
.Ve
.PP
Callback to be invoked if new data can be written to the connection.
.ie n .SS """writing"""
.el .SS "\f(CWwriting\fP"
.IX Subsection "writing"
.Vb 1
\&    $loop\->writing($id);
.Ve
.PP
Activate read/write mode for a connection.
