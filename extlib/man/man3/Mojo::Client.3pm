.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::Client 3"
.TH Mojo::Client 3 "2010-01-19" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Client \- Client
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mojo::Client;
\&
\&    my $client = Mojo::Client\->new;
\&    $client\->get(
\&        \*(Aqhttp://kraih.com\*(Aq => sub {
\&            my ($self, $tx) = @_;
\&            print $tx\->res\->code;
\&        }
\&    )\->process;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Client is a full featured async io \s-1HTTP\s0 1.1 client.
.PP
It implements the most common \s-1HTTP\s0 verbs.
If you need something more custom you can create your own
Mojo::Transaction::Single or Mojo::Trasaction::Pipeline objects and
\&\f(CW\*(C`queue\*(C'\fR them.
All of the verbs take an optional set of headers as a hash or hash reference,
as well as an optional callback sub reference.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Client implements the following attributes.
.ie n .SS """app"""
.el .SS "\f(CWapp\fP"
.IX Subsection "app"
.Vb 2
\&    my $app = $client\->app;
\&    $client = $client\->app(MyApp\->new);
.Ve
.PP
A Mojo application to associate this client with.
If set, requests will be processed in this application.
.ie n .SS """continue_timeout"""
.el .SS "\f(CWcontinue_timeout\fP"
.IX Subsection "continue_timeout"
.Vb 2
\&    my $timeout = $client\->continue_timeout;
\&    $client     = $client\->continue_timeout(5);
.Ve
.PP
Time to wait for a 100 continue in seconds, defaults to \f(CW5\fR.
.ie n .SS """cookie_jar"""
.el .SS "\f(CWcookie_jar\fP"
.IX Subsection "cookie_jar"
.Vb 2
\&    my $cookie_jar = $client\->cookie_jar;
\&    $client        = $client\->cookie_jar(Mojo::CookieJar\->new);
.Ve
.PP
Cookie jar to use for this clients requests, by default a Mojo::CookieJar
object.
.ie n .SS """default_cb"""
.el .SS "\f(CWdefault_cb\fP"
.IX Subsection "default_cb"
.Vb 2
\&    my $cb  = $client\->default_cb;
\&    $client = $client\->default_cb(sub {...});
.Ve
.PP
A default callback to use if your request does not specify a callback.
.PP
.Vb 3
\&    $client\->default_cb(sub {
\&        my ($self, $tx) = @_;
\&    });
.Ve
.ie n .SS """ioloop"""
.el .SS "\f(CWioloop\fP"
.IX Subsection "ioloop"
.Vb 2
\&    my $loop = $client\->ioloop;
\&    $client  = $client\->ioloop(Mojo::IOLoop\->new);
.Ve
.PP
Loop object to use for io operations, by default it will use the global
Mojo::IOLoop singleton.
You can force the client to block on \f(CW\*(C`process\*(C'\fR by creating a new loop
object.
.ie n .SS """keep_alive_timeout"""
.el .SS "\f(CWkeep_alive_timeout\fP"
.IX Subsection "keep_alive_timeout"
.Vb 2
\&    my $keep_alive_timeout = $client\->keep_alive_timeout;
\&    $client                = $client\->keep_alive_timeout(15);
.Ve
.PP
Timeout in seconds for keep alive between requests, defaults to \f(CW15\fR.
.ie n .SS """max_keep_alive_connections"""
.el .SS "\f(CWmax_keep_alive_connections\fP"
.IX Subsection "max_keep_alive_connections"
.Vb 2
\&    my $max_keep_alive_connections = $client\->max_keep_alive_connections;
\&    $client                        = $client\->max_keep_alive_connections(5);
.Ve
.PP
Maximum number of keep alive connections that the client will retain before
it starts closing the oldest cached ones, defaults to \f(CW5\fR.
.ie n .SS """max_redirects"""
.el .SS "\f(CWmax_redirects\fP"
.IX Subsection "max_redirects"
.Vb 2
\&    my $max_redirects = $client\->max_redirects;
\&    $client           = $client\->max_redirects(3);
.Ve
.PP
Maximum number of redirects the client will follow before it fails, defaults
to \f(CW3\fR.
.ie n .SS """tls_ca_file"""
.el .SS "\f(CWtls_ca_file\fP"
.IX Subsection "tls_ca_file"
.Vb 2
\&    my $tls_ca_file = $client\->tls_ca_file;
\&    $client         = $client\->tls_ca_file(\*(Aq/etc/tls/cacerts.pem\*(Aq);
.Ve
.PP
\&\s-1TLS\s0 certificate authority file to use, defaults to the \s-1MOJO_CA_FILE\s0
environment variable.
Note that IO::Socket::SSL must be installed for \s-1HTTPS\s0 support.
.ie n .SS """tls_verify_cb"""
.el .SS "\f(CWtls_verify_cb\fP"
.IX Subsection "tls_verify_cb"
.Vb 2
\&    my $tls_verify_cb = $client\->tls_verify_cb;
\&    $client           = $client\->tls_verify_cb(sub {...});
.Ve
.PP
Callback to verify your \s-1TLS\s0 connection, by default the client will accept
most certificates.
Note that IO::Socket::SSL must be installed for \s-1HTTPS\s0 support.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Client inherits all methods from Mojo::Base and implements the
following new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&    my $client = Mojo::Client\->new;
.Ve
.PP
Construct a new Mojo::Client object.
As usual, you can pass any of the attributes above to the constructor.
.ie n .SS """delete"""
.el .SS "\f(CWdelete\fP"
.IX Subsection "delete"
.Vb 4
\&    $client = $client\->delete(\*(Aqhttp://kraih.com\*(Aq => sub {...});
\&    $client = $client\->delete(
\&      \*(Aqhttp://kraih.com\*(Aq => (Connection => \*(Aqclose\*(Aq) => sub {...}
\&    );
.Ve
.PP
Send a \s-1HTTP\s0 \f(CW\*(C`DELETE\*(C'\fR request.
.ie n .SS """get"""
.el .SS "\f(CWget\fP"
.IX Subsection "get"
.Vb 4
\&    $client = $client\->get(\*(Aqhttp://kraih.com\*(Aq => sub {...});
\&    $client = $client\->get(
\&      \*(Aqhttp://kraih.com\*(Aq => (Connection => \*(Aqclose\*(Aq) => sub {...}
\&    );
.Ve
.PP
Send a \s-1HTTP\s0 \f(CW\*(C`GET\*(C'\fR request.
.ie n .SS """head"""
.el .SS "\f(CWhead\fP"
.IX Subsection "head"
.Vb 4
\&    $client = $client\->head(\*(Aqhttp://kraih.com\*(Aq => sub {...});
\&    $client = $client\->head(
\&      \*(Aqhttp://kraih.com\*(Aq => (Connection => \*(Aqclose\*(Aq) => sub {...}
\&    );
.Ve
.PP
Send a \s-1HTTP\s0 \f(CW\*(C`HEAD\*(C'\fR request.
.ie n .SS """post"""
.el .SS "\f(CWpost\fP"
.IX Subsection "post"
.Vb 4
\&    $client = $client\->post(\*(Aqhttp://kraih.com\*(Aq => sub {...});
\&    $client = $client\->post(
\&      \*(Aqhttp://kraih.com\*(Aq => (Connection => \*(Aqclose\*(Aq) => sub {...}
\&    );
.Ve
.PP
Send a \s-1HTTP\s0 \f(CW\*(C`POST\*(C'\fR request.
.ie n .SS """post_form"""
.el .SS "\f(CWpost_form\fP"
.IX Subsection "post_form"
.Vb 10
\&    $client = $client\->post_form(\*(Aq/foo\*(Aq => {test => 123}, sub {...});
\&    $client = $client\->post_form(
\&        \*(Aq/foo\*(Aq,
\&        \*(AqUTF\-8\*(Aq,
\&        {test => 123},
\&        sub {...}
\&    );
\&    $client = $client\->post_form(
\&        \*(Aq/foo\*(Aq,
\&        {test => 123},
\&        {Expect => \*(Aq100\-continue\*(Aq},
\&        sub {...}
\&    );
\&    $client = $client\->post_form(
\&        \*(Aq/foo\*(Aq,
\&        \*(AqUTF\-8\*(Aq,
\&        {test => 123},
\&        {Expect => \*(Aq100\-continue\*(Aq},
\&        sub {...}
\&    );
.Ve
.PP
Send a \s-1HTTP\s0 \f(CW\*(C`POST\*(C'\fR request with form data.
.ie n .SS """process"""
.el .SS "\f(CWprocess\fP"
.IX Subsection "process"
.Vb 3
\&    $client = $client\->process;
\&    $client = $client\->process(@transactions);
\&    $client = $client\->process(@transactions => sub {...});
.Ve
.PP
Process all queued transactions.
Will be blocking unless you have a global shared ioloop.
.ie n .SS """put"""
.el .SS "\f(CWput\fP"
.IX Subsection "put"
.Vb 4
\&    $client = $client\->put(\*(Aqhttp://kraih.com\*(Aq => sub {...});
\&    $client = $client\->put(
\&      \*(Aqhttp://kraih.com\*(Aq => (Connection => \*(Aqclose\*(Aq) => sub {...}
\&    );
.Ve
.PP
Send a \s-1HTTP\s0 \f(CW\*(C`PUT\*(C'\fR request.
.ie n .SS """queue"""
.el .SS "\f(CWqueue\fP"
.IX Subsection "queue"
.Vb 2
\&    $client = $client\->queue(@transactions);
\&    $client = $client\->queue(@transactions => sub {...});
.Ve
.PP
Queue a list of transactions for processing.
