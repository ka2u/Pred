.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Model::Driver::Memcached 3"
.TH Data::Model::Driver::Memcached 3 "2010-01-18" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Model::Driver::Memcached \- storage driver for memcached protocol
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package MyDB;
\&  use base \*(AqData::Model\*(Aq;
\&  use Data::Model::Schema;
\&  use Data::Model::Driver::Memcached;
\&  
\&  my $dbi_connect_options = {};
\&  my $driver = Data::Model::Driver::Memcached\->new(
\&      memcached => Cache::Memcached::Fast\->new({ servers => [ { address => "localhost:11211" }, ], }),
\&  );
\&  
\&  base_driver $driver;
\&  install_model model_name => schema {
\&    ....
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Storage is used via a memcached protocol.
.PP
It can save at memcached, Tokyo Tyrant, kai, groonga, etc.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "serializer"
.IX Subsection "serializer"
.Vb 4
\&  my $driver = Data::Model::Driver::Memcached\->new(
\&      memcached  => Cache::Memcached::Fast\->new({ servers => [ { address => "localhost:11211" }, ], }),
\&      serializer => \*(AqDefault\*(Aq, # default is L<Data::MessagePack> or messagepack minimum set for Data::Model
\&  );
.Ve
.PP
you can use customizable serializer.
.PP
.Vb 10
\&  {
\&      package MySerializer;
\&      sub serialize {
\&          my($class, $c, $hash) = @_;
\&          # you serialize of $hash
\&          return $serialize_string;
\&      }
\&      sub deserialize {
\&          my($class, $c, $serialize_string) = @_;
\&          ...
\&          return $hash;
\&      }
\&  }
\&  my $driver = Data::Model::Driver::Memcached\->new(
\&      memcached  => Cache::Memcached::Fast\->new({ servers => [ { address => "localhost:11211" }, ], }),
\&      serializer => \*(Aq+MySerializer\*(Aq,
\&  );
.Ve
.SS "strip_keys"
.IX Subsection "strip_keys"
strip tables key data, Because key data stored in a memcached key part.
.PP
.Vb 4
\&  my $driver = Data::Model::Driver::Memcached\->new(
\&      memcached  => Cache::Memcached::Fast\->new({ servers => [ { address => "localhost:11211" }, ], }),
\&      strip_keys => 1,
\&  );
.Ve
.SS "ignore_undef_value"
.IX Subsection "ignore_undef_value"
When \fBvalue\fR is \fBundef\fR, a value is not put into storage.
.PP
It becomes size saving at the time of obvious empty data.
.PP
.Vb 4
\&  my $driver = Data::Model::Driver::Memcached\->new(
\&      memcached          => Cache::Memcached::Fast\->new({ servers => [ { address => "localhost:11211" }, ], }),
\&      ignore_undef_value => 1,
\&  );
.Ve
.SS "model_name_realname column_name_rename"
.IX Subsection "model_name_realname column_name_rename"
compress your table name and column name.
.SH "OPTIONS EXAMPLE"
.IX Header "OPTIONS EXAMPLE"
.Vb 10
\&  my $driver = Data::Model::Driver::Memcached\->new(
\&      memcached  => Cache::Memcached::Fast\->new({ servers => [ { address => "localhost:11211" }, ], namespace => \*(Aqtest\*(Aq, }),
\&      serializer => \*(AqDefault\*(Aq,
\&      strip_keys => 1,
\&  );
\&  install_model simple => schema {
\&      schema_options model_name_realname => \*(Aqs\*(Aq;
\&      key \*(Aqid\*(Aq;
\&      column \*(Aqid\*(Aq;
\&      column \*(Aqname\*(Aq;
\&      column \*(Aqnickname\*(Aq;
\&      schema_options column_name_rename => {
\&          id       => 1,
\&          name     => 2,
\&          nickname => 3,
\&      };
\&  };
\&
\&  $model\->set(
\&      simple => \*(Aqkeyvalue\*(Aq => {
\&          name     => \*(Aqosawa\*(Aq,
\&          nickname => \*(Aqyappo\*(Aq,
\&      }
\&  );
\&  # same code
\&  $memcached\->add(
\&      \*(Aqtests:keyvalue\*(Aq,
\&      Data::MessagePack\->pack({ 2 => \*(Aqosawa\*(Aq, 3 => \*(Aqyappo\*(Aq }),
\&  );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cache::Memcache::Fast,
Data::Model
.SH "AUTHOR"
.IX Header "AUTHOR"
Kazuhiro Osawa <yappo <at> shibuya <dA\*~Xt> pl>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
