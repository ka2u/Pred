.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious 3"
.TH Mojolicious 3 "2010-01-25" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious \- Web Framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base \*(AqMojolicious\*(Aq;
\&
\&    sub startup {
\&        my $self = shift;
\&
\&        # Routes
\&        my $r = $self\->routes;
\&
\&        # Default route
\&        $r\->route(\*(Aq/:controller/:action/:id\*(Aq)\->to(\*(Aqfoo#bar\*(Aq, id => 1);
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicous is a full stack \s-1MVC\s0 web framework built upon Mojo.
.PP
For more user friendly documentation see Mojolicious::Book and
Mojolicious::Lite.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious inherits all attributes from Mojo and implements the
following new ones.
.ie n .SS """mode"""
.el .SS "\f(CWmode\fP"
.IX Subsection "mode"
.Vb 2
\&    my $mode = $mojo\->mode;
\&    $mojo    = $mojo\->mode(\*(Aqproduction\*(Aq);
.Ve
.PP
The operating mode for your application.
It defaults to the value of the environment variable \f(CW\*(C`MOJO_MODE\*(C'\fR or
\&\f(CW\*(C`development\*(C'\fR.
Mojo will name the log file after the current mode and modes other than
\&\f(CW\*(C`development\*(C'\fR will result in limited log output.
.PP
If you want to add per mode logic to your application, you can add a sub
to your application named \f(CW$mode_mode\fR.
.PP
.Vb 3
\&    sub development_mode {
\&        my $self = shift;
\&    }
\&
\&    sub production_mode {
\&        my $self = shift;
\&    }
.Ve
.ie n .SS """plugins"""
.el .SS "\f(CWplugins\fP"
.IX Subsection "plugins"
.Vb 2
\&    my $plugins = $mojo\->plugins;
\&    $mojo       = $mojo\->plugins(Mojolicious::Plugins\->new);
.Ve
.PP
The plugin loader, by default a Mojolicious::Plugins object.
You can usually leave this alone, see Mojolicious::Plugin if you want to
write a plugin.
.ie n .SS """renderer"""
.el .SS "\f(CWrenderer\fP"
.IX Subsection "renderer"
.Vb 2
\&    my $renderer = $mojo\->renderer;
\&    $mojo        = $mojo\->renderer(MojoX::Renderer\->new);
.Ve
.PP
Used in your application to render content, by default a MojoX::Renderer
object.
The two main renderer plugins Mojolicious::Plugin::EpRenderer and
Mojolicious::Plugin::EplRenderer contain more specific information.
.ie n .SS """routes"""
.el .SS "\f(CWroutes\fP"
.IX Subsection "routes"
.Vb 2
\&    my $routes = $mojo\->routes;
\&    $mojo      = $mojo\->routes(MojoX::Dispatcher::Routes\->new);
.Ve
.PP
The routes dispatcher, by default a MojoX::Dispatcher::Routes object.
You use this in your startup method to define the url endpoints for your
application.
.PP
.Vb 2
\&    sub startup {
\&        my $self = shift;
\&
\&        my $r = $self\->routes;
\&        $r\->route(\*(Aq/:controller/:action\*(Aq)\->to(\*(Aqtest#welcome\*(Aq);
\&    }
.Ve
.ie n .SS """static"""
.el .SS "\f(CWstatic\fP"
.IX Subsection "static"
.Vb 2
\&    my $static = $mojo\->static;
\&    $mojo      = $mojo\->static(MojoX::Dispatcher::Static\->new);
.Ve
.PP
For serving static assets from your \f(CW\*(C`public\*(C'\fR directory, by default a
MojoX::Dispatcher::Static object.
.ie n .SS """types"""
.el .SS "\f(CWtypes\fP"
.IX Subsection "types"
.Vb 2
\&    my $types = $mojo\->types;
\&    $mojo     = $mojo\->types(MojoX::Types\->new);
.Ve
.PP
Responsible for tracking the types of content you want to serve in your
application, by default a MojoX::Types object.
You can easily register new types.
.PP
.Vb 1
\&    $mojo\->types\->type(vti => \*(Aqhelp/vampire\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojolicious inherits all methods from Mojo and implements the following
new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&    my $mojo = Mojolicious\->new;
.Ve
.PP
Construct a new Mojolicious application.
Will automatically detect your home directory and set up logging based on
your current operating mode.
Also sets up the renderer, static dispatcher and a default set of plugins.
.ie n .SS """dispatch"""
.el .SS "\f(CWdispatch\fP"
.IX Subsection "dispatch"
.Vb 1
\&    $mojo\->dispatch($c);
.Ve
.PP
The heart of every Mojolicious application, calls the static and routes
dispatchers for every request.
.ie n .SS """handler"""
.el .SS "\f(CWhandler\fP"
.IX Subsection "handler"
.Vb 1
\&    $tx = $mojo\->handler($tx);
.Ve
.PP
Sets up the default controller and calls process for every request.
.ie n .SS """plugin"""
.el .SS "\f(CWplugin\fP"
.IX Subsection "plugin"
.Vb 3
\&    $mojo\->plugin(\*(Aqsomething\*(Aq);
\&    $mojo\->plugin(\*(Aqsomething\*(Aq, foo => 23);
\&    $mojo\->plugin(\*(Aqsomething\*(Aq, {foo => 23});
.Ve
.PP
Load a plugin.
.ie n .SS """process"""
.el .SS "\f(CWprocess\fP"
.IX Subsection "process"
.Vb 1
\&    $mojo\->process($c);
.Ve
.PP
This method can be overloaded to do logic on a per request basis, by default
just calls dispatch.
Generally you will use a plugin or controller instead of this, consider it
the sledgehammer in your toolbox.
.PP
.Vb 4
\&    sub process {
\&        my ($self, $c) = @_;
\&        $self\->dispatch($c);
\&    }
.Ve
.ie n .SS """start"""
.el .SS "\f(CWstart\fP"
.IX Subsection "start"
.Vb 2
\&    Mojolicious\->start;
\&    Mojolicious\->start(\*(Aqdaemon\*(Aq);
.Ve
.PP
Start the Mojolicious::Commands command line interface for your
application.
.ie n .SS """startup"""
.el .SS "\f(CWstartup\fP"
.IX Subsection "startup"
.Vb 1
\&    $mojo\->startup;
.Ve
.PP
This is your main hook into the application, it will be called at application
startup.
.PP
.Vb 3
\&    sub startup {
\&        my $self = shift;
\&    }
.Ve
