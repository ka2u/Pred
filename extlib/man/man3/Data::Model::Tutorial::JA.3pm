.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Model::Tutorial::JA 3"
.TH Data::Model::Tutorial::JA 3 "2010-01-18" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Model::Tutorial::JA \- Data::Model::TutorialXXXX
.SH "Data::Model XX"
.IX Header "Data::Model XX"
id:yappo \s-1XXXXXXXXX\s0 O/R MapperXXXXXXXXXXXXXXXXXXXXX
\&\s-1XXXXXXXXXXXXXXXXXX\s0
.PP
XXXXXData::Model \s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXX\s0
.PP
\&\s-1XXX\s0 Data::Model \s-1XXXXXXXX\s0 Data::Model Track \- JPerl Advent Calendar 2009 \s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
http://perl\-users.jp/articles/advent\-calendar/2009/data\-model/ <http://perl-users.jp/articles/advent-calendar/2009/data-model/>
\&\s-1XXXXXXXXXXXXXXXX\s0 \s-1POD\s0 \s-1XXXXXXXX\s0
.SH "XXXXXX"
.IX Header "XXXXXX"
.SS "\s-1DBI\s0 \s-1XXXXXXXXXX\s0"
.IX Subsection "DBI XXXXXXXXXX"
Data::Model XXData::Model \s-1XXXXXXXXXCREATE\s0 \s-1TABLE\s0 \s-1XXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXX\s0 Perl \s-1XXXXXX\s0
.PP
.Vb 7
\&  # lib/Neko/DB/User.pm
\&  package Neko::DB::User;
\&  use strict;
\&  use warnings;
\&  use base \*(AqData::Model\*(Aq;
\&  use Data::Model::Schema sugar => \*(Aqmyapp\*(Aq;
\&  use Neko::Columns;
\&  
\&  install_model user => schema {
\&      # primary key
\&      key \*(Aqid\*(Aq;
\&  
\&      # XXXXX
\&      column \*(Aquser.id\*(Aq => { auto_increment => 1 };
\&      utf8_column \*(Aquser.name\*(Aq;
\&  };
\&  1;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXX\s0
.PP
.Vb 5
\&  # lib/Neko/Columns.pm
\&  package Neko::Columns;
\&  use strict;
\&  use warnings;
\&  use Data::Model::Schema sugar => \*(Aqmyapp\*(Aq;
\&  
\&  column_sugar \*(Aquser.id\*(Aq
\&      => int => {
\&          required => 1,
\&          unsigned => 1,
\&      };
\&  column_sugar \*(Aquser.name\*(Aq
\&      => \*(Aqvarchar\*(Aq => {
\&          required => 1,
\&          size     => 255,
\&      };
\&  1;
.Ve
.PP
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXX\s0 O/R Mapper \s-1XXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXX\s0 created_on \s-1XXXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXX\s0
.SS "\s-1XXXXXXXXXXXXX\s0"
.IX Subsection "XXXXXXXXXXXXX"
\&\s-1XXXXXXXXCREATE\s0 \s-1TABLE\s0 \s-1XXXXXXXXX\s0
.PP
.Vb 5
\&  # script/dump_schema.pl
\&  use strict;
\&  use warnings;
\&  use Neko::DB::User;
\&  use Data::Model::Driver::DBI;
\&  
\&  my $dm = Neko::DB::User\->new();
\&  
\&  do {
\&      # XXXXXXXXXXX
\&      my $driver = Data::Model::Driver::DBI\->new(
\&          dsn => \*(Aqdbi:SQLite:\*(Aq
\&      );
\&      $dm\->set_base_driver($driver);
\&  };
\&  
\&  for my $target ($dm\->schema_names) {
\&      for my $sql ($dm\->as_sqls($target)) {
\&          print "$sql\en";
\&      }
\&  }
.Ve
.PP
XXXXXXXXdriver \s-1XX\s0 schema \s-1XXXXXXXXXXXXXXXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
.Vb 6
\&  # script/crud.pl
\&  use strict;
\&  use warnings;
\&  use Test::More tests => 10;
\&  use Neko::DB::User;
\&  use Data::Model::Driver::DBI;
\&  
\&  my $dm = Neko::DB::User\->new();
\&  
\&  # XXXXXXXXXXX
\&  {
\&      my $driver = Data::Model::Driver::DBI\->new(
\&          dsn => \*(Aqdbi:SQLite:\*(Aq
\&      );
\&      $dm\->set_base_driver($driver);
\&  }
\&  
\&  # schema XXXXXXX
\&  for my $target ($dm\->schema_names) {
\&      my $dbh = $dm\->get_driver($target)\->rw_handle;
\&      for my $sql ($dm\->as_sqls($target)) {
\&          $dbh\->do($sql);
\&      }
\&  }
\&  
\&  # INSERT XXXX
\&  $dm\->set( \*(Aquser\*(Aq => {
\&      name => \*(Aqyappo\*(Aq
\&  });
\&  $dm\->set(\*(Aquser\*(Aq => {
\&      name => \*(Aqukonmanaho\*(Aq
\&  });
\&  
\&  # SELECT XXXX
\&  #  XXXXXXXXXXXXXXXXXX
\&  {
\&      my $iterator = $dm\->get(\*(Aquser\*(Aq => {
\&          order => {\*(Aqid\*(Aq => \*(AqASC\*(Aq}
\&      });
\&      my @names;
\&      while (my $row = $iterator\->next) {
\&          push @names, $row\->name;
\&      }
\&      is join(\*(Aq,\*(Aq, @names), \*(Aqyappo,ukonmanaho\*(Aq;
\&  }
\&  
\&  # XXXXXXXXXXXXXXX
\&  {
\&      my @users = $dm\->get(\*(Aquser\*(Aq => {order => { \*(Aqid\*(Aq => \*(AqDESC\*(Aq }});
\&      is scalar(@users), 2;
\&      is $users[0]\->name, \*(Aqukonmanaho\*(Aq;
\&      is $users[1]\->name, \*(Aqyappo\*(Aq;
\&  }
\&  
\&  # XXXXXXX
\&  {
\&      my @users = $dm\->get(\*(Aquser\*(Aq => {
\&          where => [
\&              name => \*(Aqyappo\*(Aq
\&          ],
\&      });
\&      is scalar(@users), 1;
\&      is $users[0]\->name, \*(Aqyappo\*(Aq;
\&  }
\&  
\&  # update
\&  {
\&      my ($ukon, ) = $dm\->get(\*(Aquser\*(Aq => {
\&          where => [
\&              name => \*(Aqukonmanaho\*(Aq
\&          ],
\&      });
\&      is $ukon\->name, \*(Aqukonmanaho\*(Aq;
\&      $ukon\->name(\*(Aqjack\*(Aq);
\&      $ukon\->update;
\&  }
\&  
\&  # delete
\&  {
\&      my $count_users = sub {
\&          scalar(my @users = $dm\->get(\*(Aquser\*(Aq));
\&      };
\&  
\&      is $count_users\->(), 2;
\&  
\&      my ($jack, ) = $dm\->get(\*(Aquser\*(Aq => {
\&          where => [
\&              name => \*(Aqjack\*(Aq
\&          ],
\&      });
\&      is $jack\->name, \*(Aqjack\*(Aq;
\&      $jack\->delete;
\&  
\&      is $count_users\->(), 1;
\&  }
.Ve
.PP
\&\s-1XXXXX\s0 \s-1SELECT/INSERT/UPDATE/DELETE\s0 \s-1XXXXXXXXXXXX\s0
.SS "Memcached \s-1XXXXXXX\s0"
.IX Subsection "Memcached XXXXXXX"
Data::Model \s-1XXXXXXXXXX\s0 SQLite \s-1XXX\s0 memcached protocol \s-1XXXXXXX\s0
\&\s-1XXXXXXXXXXXXXXXXXXXX\s0 hash database \s-1XXXXXXXXXXXXX\s0
XXXXXXXTokyo Tyrant XXXXXXXXXXXXData::Model \s-1XXXXXXXXX\s0
\&\s-1XXXXXXXXX\s0
.PP
Memcached \s-1XXXXXXXXXXXXXXXXXXXXXXXXXX\s0
.PP
.Vb 7
\&  # script/memcached.pl
\&  use strict;
\&  use warnings;
\&  use Test::More tests => 2;
\&  use Neko::DB::User;
\&  use Data::Model::Driver::Memcached;
\&  use Cache::Memcached::Fast;
\&  
\&  my $dm = Neko::DB::User\->new();
\&  
\&  # XXXXXXXXXXX
\&  {
\&      my $driver = Data::Model::Driver::Memcached\->new(
\&          memcached => Cache::Memcached::Fast\->new({
\&              servers => [
\&                  \*(Aq127.0.0.1:11211\*(Aq,
\&              ],
\&          }),
\&      );
\&      warn $dm\->set_base_driver($driver);
\&  }
\&  
\&  # INSERT
\&  warn $dm\->set( \*(Aquser\*(Aq => 1, {
\&      name => \*(Aqyappo\*(Aq
\&  });
\&  warn $dm\->set(\*(Aquser\*(Aq => 2, {
\&      name => \*(Aqukonmanaho\*(Aq
\&  });
\&  
\&  # SELECT
\&  {
\&      my ($yappo) = $dm\->get(\*(Aquser\*(Aq => 1);
\&      warn $yappo;
\&      is $yappo\->name, \*(Aqyappo\*(Aq;
\&  }
\&  {
\&      my ($ukonmanaho) = $dm\->get(\*(Aquser\*(Aq => 2);
\&      warn $ukonmanaho;
\&      is $ukonmanaho\->name, \*(Aqukonmanaho\*(Aq;
\&  }
.Ve
.SS "\s-1XXXXXXXXXXX\s0"
.IX Subsection "XXXXXXXXXXX"
\&\s-1DBI\s0 X Memcached \s-1XXXXXXXXXXXXXXXXX\s0 Memcached \s-1XXXXXXXXX\s0
\&\s-1XXXXXXXXXXXXXX\s0
.SS "Q4M"
.IX Subsection "Q4M"
.SH "XXXXXXXX"
.IX Header "XXXXXXXX"
.SH "XXXXXXXXXXXXXXXXXXXXXX"
.IX Header "XXXXXXXXXXXXXXXXXXXXXX"
.SS "get"
.IX Subsection "get"
.SS "lookup"
.IX Subsection "lookup"
.SS "lookup_multi"
.IX Subsection "lookup_multi"
.SS "set"
.IX Subsection "set"
.SS "replace"
.IX Subsection "replace"
.SS "update"
.IX Subsection "update"
.SS "delete"
.IX Subsection "delete"
.SH "Mixin XXXX"
.IX Header "Mixin XXXX"
.SH "trigger XXXX"
.IX Header "trigger XXXX"
.SH "XXXXXXXXXXX"
.IX Header "XXXXXXXXXXX"
tokuhirom (original http://github.com/tokuhirom/data\-model\-tutorial/tree/master)
.PP
yappo (\s-1XXXX\s0)
