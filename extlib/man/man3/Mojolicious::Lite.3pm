.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Lite 3"
.TH Mojolicious::Lite 3 "2010-01-19" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Lite \- Micro Web Framework
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Using Mojolicious::Lite will enable "strict" and "warnings"
\&    use Mojolicious::Lite;
\&
\&    # Route with placeholder
\&    get \*(Aq/:foo\*(Aq => sub {
\&        my $self = shift;
\&        $self\->render_text(\*(AqYea baby!\*(Aq);
\&    };
\&
\&    # Start the Mojolicious command system
\&    shagadelic;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicous::Lite is a micro web framework built around Mojolicious.
.PP
A minimal application looks like this.
.PP
.Vb 1
\&    #!/usr/bin/env perl
\&
\&    use Mojolicious::Lite;
\&
\&    get \*(Aq/\*(Aq => sub {
\&        my $self = shift;
\&        $self\->render_text(\*(AqYea baby!\*(Aq);
\&    };
\&
\&    shagadelic;
.Ve
.PP
There is also a helper command to generate a small example application.
.PP
.Vb 1
\&    % mojolicious generate lite_app
.Ve
.PP
All the normal Mojolicious command options are available from the command
line.
.PP
.Vb 2
\&    % ./myapp.pl daemon
\&    Server available at http://127.0.0.1:3000.
\&
\&    % ./myapp.pl daemon 8080
\&    Server available at http://127.0.0.1:8080.
\&
\&    % ./myapp.pl daemon_prefork
\&    Server available at http://127.0.0.1:3000.
\&
\&    % ./myapp.pl cgi
\&    ...CGI output...
\&
\&    % ./myapp.pl fastcgi
\&    ...Blocking FastCGI main loop...
.Ve
.PP
The shagadelic call that starts the Mojolicious command system can be
customized to override normal \f(CW@ARGV\fR use.
.PP
.Vb 1
\&    shagadelic(\*(Aqcgi\*(Aq);
.Ve
.PP
Your application will automatically reload itself if you set the \f(CW\*(C`\-\-reload\*(C'\fR
option, so you don't have to restart the server after every change.
.PP
.Vb 2
\&    % ./myapp.pl daemon \-\-reload
\&    Server available at http://127.0.0.1:3000.
.Ve
.PP
Routes are basically just fancy paths that can contain different kinds of
placeholders.
.PP
.Vb 5
\&    # /foo
\&    get \*(Aq/foo\*(Aq => sub {
\&        my $self = shift;
\&        $self\->render_text(\*(AqYea baby!\*(Aq);
\&    };
.Ve
.PP
All routes can have a name associated with them, this allows automatic
template detection and back referencing with \f(CW\*(C`url_for\*(C'\fR.
Names are always the last argument.
.PP
.Vb 2
\&    # /
\&    get \*(Aq/\*(Aq => \*(Aqindex\*(Aq;
\&
\&    # /foo
\&    get \*(Aq/foo\*(Aq => \*(Aqfoo\*(Aq;
\&
\&    # /bar
\&    get \*(Aq/bar\*(Aq => sub {
\&        my $self = shift;
\&        $self\->render_text(\*(AqHi!\*(Aq)
\&    } => \*(Aqbar\*(Aq;
\&
\&    _\|_DATA_\|_
\&
\&    @@ index.html.ep
\&    <a href="<%= url_for \*(Aqfoo\*(Aq %>">Foo</a>.
\&    <a href="<%= url_for \*(Aqbar\*(Aq %>">Bar</a>.
\&
\&    @@ foo.html.ep
\&    <a href="<%= url_for \*(Aqindex\*(Aq %>">Home</a>.
.Ve
.PP
Templates can have layouts.
.PP
.Vb 5
\&    # GET /with_layout
\&    get \*(Aq/with_layout\*(Aq => sub {
\&        my $self = shift;
\&        $self\->render(\*(Aqwith_layout\*(Aq, layout => \*(Aqgreen\*(Aq);
\&    };
\&
\&    _\|_DATA_\|_
\&
\&    @@ with_layout.html.ep
\&    We\*(Aqve got content!
\&
\&    @@ layouts/green.html.ep
\&    <!doctype html><html>
\&        <head><title>Green!</title></head>
\&        <body><%= content %></body>
\&    </html>
.Ve
.PP
Templates can also extend each other.
.PP
.Vb 2
\&    # GET /
\&    get \*(Aq/\*(Aq => \*(Aqfirst\*(Aq;
\&
\&    # GET /second
\&    get \*(Aq/second\*(Aq => \*(Aqsecond\*(Aq;
\&
\&    _\|_DATA_\|_
\&
\&    @@ first.html.ep
\&    % extends \*(Aqsecond\*(Aq;
\&    %{ content header =>
\&        <title>Howdy!</title>
\&    %}
\&    First!
\&
\&    @@ second.html.ep
\&    % layout \*(Aqthird\*(Aq;
\&    %{ content header =>
\&        <title>Welcome!</title>
\&    %}
\&    Second!
\&
\&    @@ layouts/third.html.ep
\&    <!doctype html><html>
\&        <head>
\&            <%{= content header => %>
\&                <title>Lame default title...</title>
\&            <%}%>
\&        </head>
\&        <body><%= content %></body>
\&    </html>
.Ve
.PP
Route placeholders allow capturing parts of a request path until a \f(CW\*(C`/\*(C'\fR or
\&\f(CW\*(C`.\*(C'\fR separator occurs, results will be stored by name in the \f(CW\*(C`stash\*(C'\fR and
\&\f(CW\*(C`param\*(C'\fR.
.PP
.Vb 6
\&    # /foo/*
\&    get \*(Aq/foo/:bar\*(Aq => sub {
\&        my $self = shift;
\&        my $bar  = $self\->stash(\*(Aqbar\*(Aq);
\&        $self\->render_text("Our :bar placeholder matched $bar");
\&    };
\&
\&    # /*something/foo
\&    get \*(Aq/(:bar)something/foo\*(Aq => sub {
\&        my $self = shift;
\&        my $bar  = $self\->param(\*(Aqbar\*(Aq);
\&        $self\->render_text("Our :bar placeholder matched $bar");
\&    };
.Ve
.PP
Relaxed placeholders allow matching of everything until a \f(CW\*(C`/\*(C'\fR occurs.
.PP
.Vb 4
\&    # GET /hello/*
\&    get \*(Aq/hello/(.you)\*(Aq => sub {
\&        shift\->render(\*(Aqgroovy\*(Aq);
\&    };
\&
\&    _\|_DATA_\|_
\&
\&    @@ groovy.html.ep
\&    Your name is <%= $you %>.
.Ve
.PP
Wildcard placeholders allow matching absolutely everything, including
\&\f(CW\*(C`/\*(C'\fR and \f(CW\*(C`.\*(C'\fR.
.PP
.Vb 4
\&    # /hello/*
\&    get \*(Aq/hello/(*you)\*(Aq => sub {
\&        shift\->render(\*(Aqgroovy\*(Aq);
\&    };
\&
\&    _\|_DATA_\|_
\&
\&    @@ groovy.html.ep
\&    Your name is <%= $you %>.
.Ve
.PP
Routes can be restricted to specific request methods.
.PP
.Vb 2
\&    # GET /bye
\&    get \*(Aq/bye\*(Aq => sub { shift\->render_text(\*(AqBye!\*(Aq) };
\&
\&    # POST /bye
\&    post \*(Aq/bye\*(Aq => sub { shift\->render_text(\*(AqBye!\*(Aq) };
\&
\&    # GET|POST|DELETE /bye
\&    any [qw/get post delete/] => \*(Aq/bye\*(Aq => sub {
\&        shift\->render_text(\*(AqBye!\*(Aq);
\&    };
\&
\&    # /baz
\&    any \*(Aq/baz\*(Aq => sub {
\&        my $self   = shift;
\&        my $method = $self\->req\->method;
\&        $self\->render_text("You called /baz with $method");
\&    };
.Ve
.PP
All placeholders get compiled to a regex internally, with regex constraints
this process can be easily customized.
.PP
.Vb 6
\&    # /*
\&    any \*(Aq/:bar\*(Aq => [bar => qr/\ed+/] => sub {
\&        my $self = shift;
\&        my $bar  = $self\->param(\*(Aqbar\*(Aq);
\&        $self\->render_text("Our :bar placeholder matched $bar");
\&    };
.Ve
.PP
Routes allow default values to make placeholders optional.
.PP
.Vb 5
\&    # /hello/*
\&    get \*(Aq/hello/:name\*(Aq => {name => \*(AqSebastian\*(Aq} => sub {
\&        my $self = shift;
\&        $self\->render(\*(Aqgroovy\*(Aq, format => \*(Aqtxt\*(Aq);
\&    };
\&
\&    _\|_DATA_\|_
\&
\&    @@ groovy.txt.ep
\&    My name is <%= $name %>.
.Ve
.PP
All those features can be easily used together.
.PP
.Vb 4
\&    # /everything/*?name=*
\&    get \*(Aq/everything/:stuff\*(Aq => [stuff => qr/\ed+/] => {stuff => 23} => sub {
\&        shift\->render(\*(Aqwelcome\*(Aq);
\&    };
\&
\&    _\|_DATA_\|_
\&
\&    @@ welcome.html.ep
\&    Stuff is <%= $stuff %>.
\&    Query param name is <%= param \*(Aqname\*(Aq %>.
.Ve
.PP
Here's a fully functional example for a html form handling application using
multiple features at once.
.PP
.Vb 1
\&    #!/usr/bin/env perl
\&
\&    use Mojolicious::Lite;
\&
\&    get \*(Aq/\*(Aq => \*(Aqindex\*(Aq;
\&
\&    post \*(Aq/form\*(Aq => sub {
\&        my $self = shift;
\&
\&        my $groovy = $self\->param(\*(Aqgroovy\*(Aq) || \*(AqAustin Powers\*(Aq;
\&        $groovy =~ s/[^\ew\es]+//g;
\&
\&        $self\->render(
\&            template => \*(Aqwelcome\*(Aq,
\&            layout   => \*(Aqfunky\*(Aq,
\&            groovy   => $groovy
\&        );
\&    } => \*(Aqform\*(Aq;
\&
\&    shagadelic;
\&    _\|_DATA_\|_
\&
\&    @@ index.html.ep
\&    % layout \*(Aqfunky\*(Aq);
\&    Who is groovy?
\&    <form action="<%= url_for \*(Aqform\*(Aq %>" method="POST">
\&        <input type="text" name="groovy" />
\&        <input type="submit" value="Woosh!">
\&    </form>
\&
\&    @@ welcome.html.ep
\&    <%= $groovy %> is groovy!
\&    <%= include \*(Aqmenu\*(Aq %>
\&
\&    @@ menu.html.ep
\&    <a href="<%= url_for \*(Aqindex\*(Aq %>">Try again</a>
\&
\&    @@ layouts/funky.html.ep
\&    <!doctype html><html>
\&        <head><title>Funky!</title></head>
\&        <body><%= content %>
\&        </body>
\&    </html>
.Ve
.PP
Ladders can be used for authentication and to share code between multiple
routes.
All routes following a ladder are only evaluated if the ladder returns a
true value.
.PP
.Vb 1
\&    use Mojolicious::Lite;
\&
\&    # Authenticate based on name parameter
\&    ladder sub {
\&        my $self = shift;
\&
\&        # Authenticated
\&        my $name = $self\->param(\*(Aqname\*(Aq) || \*(Aq\*(Aq;
\&        return 1 if $name eq \*(AqBender\*(Aq;
\&
\&        # Not authenticated
\&        $self\->render(\*(Aqdenied\*(Aq);
\&        return;
\&    };
\&
\&    # GET / (with ladder authentication)
\&    get \*(Aq/\*(Aq => \*(Aqindex\*(Aq;
\&
\&    shagadelic;
\&    _\|_DATA_\|_;
\&
\&    @@ denied.html.ep
\&    You are not Bender, permission denied!
\&
\&    @@ index.html.ep
\&    Hi Bender!
.Ve
.PP
Conditions such as \f(CW\*(C`agent\*(C'\fR allow even more powerful route constructs.
.PP
.Vb 4
\&    # /foo
\&    get \*(Aq/foo\*(Aq => (agent => qr/Firefox/) => sub {
\&        shift\->render_text(\*(AqCongratulations, you are using a cool browser!\*(Aq);
\&    }
\&
\&    # /foo
\&    get \*(Aq/foo\*(Aq => (agent => qr/Internet Explorer/) => sub {
\&        shift\->render_text(\*(AqDude, you really need to upgrade to Firefox!\*(Aq);
\&    }
.Ve
.PP
Formats can be automatically detected by looking at file extensions.
.PP
.Vb 6
\&    # /detection.html
\&    # /detection.txt
\&    get \*(Aq/detection\*(Aq => sub {
\&        my $self = shift;
\&        $self\->render(\*(Aqdetected\*(Aq);
\&    };
\&
\&    _\|_DATA_\|_
\&
\&    @@ detected.html.ep
\&    <!doctype html><html>
\&        <head><title>Detected!</title></head>
\&        <body>HTML was detected.</body>
\&    </html>
\&
\&    @@ detected.txt.ep
\&    TXT was detected.
.Ve
.PP
External templates will be searched by the renderer in a \f(CW\*(C`templates\*(C'\fR
directory.
.PP
.Vb 3
\&    # /external
\&    any \*(Aq/external\*(Aq => sub {
\&        my $self = shift;
\&
\&        # templates/foo/bar.html.ep
\&        $self\->render(\*(Aqfoo/bar\*(Aq);
\&    };
.Ve
.PP
Static files will be automatically served from the \f(CW\*(C`public\*(C'\fR directory if it
exists.
.PP
.Vb 2
\&    % mkdir public
\&    % mv something.js public/something.js
.Ve
.PP
Testing your application is as easy as creating a \f(CW\*(C`t\*(C'\fR directory and filling
it with normal Perl unit tests like \f(CW\*(C`t/funky.t\*(C'\fR.
.PP
.Vb 2
\&    use Test::More tests => 3;
\&    use Test::Mojo;
\&
\&    use FindBin;
\&    require "$FindBin::Bin/../myapp.pl";
\&
\&    my $t = Test::Mojo\->new;
\&    $t\->get_ok(\*(Aq/\*(Aq)\->status_is(200)\->content_like(qr/Funky!/);
.Ve
.PP
Run all unit tests with the \f(CW\*(C`test\*(C'\fR command.
.PP
.Vb 1
\&    % ./myapp.pl test
.Ve
.PP
To disable debug messages later in a production setup you can change the
Mojolicious mode, default will be \f(CW\*(C`development\*(C'\fR.
.PP
.Vb 1
\&    % MOJO_MODE=production ./myapp.pl
.Ve
.PP
Log messages will be automatically written to a \f(CW\*(C`log/$mode.log\*(C'\fR file if a
\&\f(CW\*(C`log\*(C'\fR directory exists.
.PP
.Vb 1
\&    % mkdir log
.Ve
.PP
For more control the Mojolicious instance can be accessed directly.
.PP
.Vb 5
\&    app\->log\->level(\*(Aqerror\*(Aq);
\&    app\->routes\->route(\*(Aq/foo/:bar\*(Aq)\->via(\*(Aqget\*(Aq)\->to(callback => sub {
\&        my $self = shift;
\&        $self\->render_text(\*(AqHello Mojo!\*(Aq);
\&    });
.Ve
.PP
In case a lite app needs to grow, lite and real Mojolicous applications
can be easily mixed to make the transition process very smooth.
.PP
.Vb 2
\&    package MyApp::Foo;
\&    use base \*(AqMojolicious::Controller\*(Aq;
\&
\&    sub index { shift\->render_text(\*(AqIt works!\*(Aq) }
\&
\&    package main;
\&    use Mojolicious::Lite;
\&
\&    get \*(Aq/bar\*(Aq => sub { shift\->render_text(\*(AqThis too!\*(Aq) };
\&
\&    app\->routes\->namespace(\*(AqMyApp\*(Aq);
\&    app\->routes\->route(\*(Aq/foo/:action\*(Aq)\->via(\*(Aqget\*(Aq)\->to(\*(Aqfoo#index\*(Aq);
\&
\&    shagadelic;
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Lite inherits all attributes from Mojolicious.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Lite inherits all methods from Mojolicious.
