.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::Template 3"
.TH Mojo::Template 3 "2010-01-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Template \- Perlish Templates!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Mojo::Template;
\&    my $mt = Mojo::Template\->new;
\&
\&    # Simple
\&    my $output = $mt\->render(<<\*(AqEOF\*(Aq);
\&    <!doctype html><html>
\&        <head><title>Simple</title></head>
\&        <body>Time: <%= localtime(time) %></body>
\&    </html>
\&    EOF
\&    print $output;
\&
\&    # More complicated
\&    my $output = $mt\->render(<<\*(AqEOF\*(Aq, 23, \*(Aqfoo bar\*(Aq);
\&    %= 5 * 5
\&    % my ($number, $text) = @_;
\&    test 123
\&    foo <% my $i = $number + 2; %>
\&    % for (1 .. 23) {
\&    * some text <%= $i++ %>
\&    % }
\&    EOF
\&    print $output;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Template is a minimalistic and very Perl-ish template engine,
designed specifically for all those small tasks that come up during big
projects.
Like preprocessing a config file, generating text from heredocs and stuff
like that.
.PP
.Vb 8
\&    <% Inline Perl %>
\&    <%= Perl expression, replaced with result %>
\&    <%== Perl expression, replaced with XML escaped result %>
\&    <%# Comment, useful for debugging %>
\&    % Perl line
\&    %= Perl expression line, replaced with result
\&    %== Perl expression line, replaced with XML escaped result
\&    %# Comment line, useful for debugging
.Ve
.PP
Whitespace characters around tags can be trimmed with a special tag ending.
.PP
.Vb 1
\&    <%= All whitespace characters around this expression will be trimmed =%>
.Ve
.PP
Mojo::ByteStream objects are excluded from automatic escaping.
You can capture the result of a whole template block for reuse later.
.PP
.Vb 12
\&    <%{ my $result = %>
\&    This will be assigned.
\&    <%}%>
\&    <%{= my $result = %>
\&    This will be assigned and passed through.
\&    <%}%>
\&    %{ my $result =
\&    This will be assigned.
\&    %}
\&    %{= my $result =
\&    This will be assigned and passed through.
\&    %}
.Ve
.PP
Mojo::Template templates work just like Perl subs (actually they get
compiled to a Perl sub internally).
That means you can access arguments simply via \f(CW@_\fR.
.PP
.Vb 3
\&    % my ($foo, $bar) = @_;
\&    % my $x = shift;
\&    test 123 <%= $foo %>
.Ve
.PP
Note that you can't escape Mojo::Template tags, instead we just replace
them if necessary.
.PP
.Vb 10
\&    my $mt = Mojo::Template\->new;
\&    $mt\->line_start(\*(Aq@@\*(Aq);
\&    $mt\->tag_start(\*(Aq[@@\*(Aq);
\&    $mt\->tag_end(\*(Aq@@]\*(Aq);
\&    $mt\->expression_mark(\*(Aq&\*(Aq);
\&    $mt\->escape_mark(\*(Aq&\*(Aq);
\&    my $output = $mt\->render(<<\*(AqEOF\*(Aq, 23);
\&    @@ my $i = shift;
\&    <% no code just text [@@&& $i @@]
\&    EOF
.Ve
.PP
There is only one case that we can escape with a backslash, and thats a
newline at the end of a template line.
.PP
.Vb 2
\&   This is <%= 23 * 3 %> a\e
\&   single line
.Ve
.PP
If for some strange reason you absolutely need a backslash in front of a
newline you can escape the backslash with another backslash.
.PP
.Vb 4
\&    % use Data::Dumper;
\&    This will\e\e
\&    result <%=  Dumper {foo => \*(Aqbar\*(Aq} %>\e\e
\&    in multiple lines
.Ve
.PP
Templates get compiled to Perl code internally, this can make debugging a bit
tricky.
But Mojo::Template will return Mojo::Template::Exception objects that
stringify to error messages with context.
.PP
.Vb 8
\&    Error around line 4.
\&    2: </head>
\&    3: <body>
\&    4: % my $i = 2; xx
\&    5: %= $i * 2
\&    6: </body>
\&    Bareword "xx" not allowed while "strict subs" in use at (eval 13)
\&    line 4.
.Ve
.PP
Mojo::Template does not support caching by itself, but you can easily
build a wrapper around it.
.PP
.Vb 5
\&    # Compile and store code somewhere
\&    my $mt = Mojo::Template\->new;
\&    $mt\->parse($template);
\&    $mt\->build;
\&    my $code = $mt\->code;
\&
\&    # Load code and template (template for debug trace only)
\&    $mt\->template($template);
\&    $mt\->code($code);
\&    $mt\->compile;
\&    my $output = $mt\->interpret(@arguments);
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Template implements the following attributes.
.ie n .SS """auto_escape"""
.el .SS "\f(CWauto_escape\fP"
.IX Subsection "auto_escape"
.Vb 2
\&    my $auto_escape = $mt\->auto_escape;
\&    $mt             = $mt\->auto_escape(1);
.Ve
.ie n .SS """append"""
.el .SS "\f(CWappend\fP"
.IX Subsection "append"
.Vb 2
\&    my $code = $mt\->append;
\&    $mt      = $mt\->append(\*(Aqwarn "Processed template"\*(Aq);
.Ve
.ie n .SS """capture_end"""
.el .SS "\f(CWcapture_end\fP"
.IX Subsection "capture_end"
.Vb 2
\&    my $capture_end = $mt\->capture_end;
\&    $mt             = $mt\->capture_end(\*(Aq}\*(Aq);
.Ve
.ie n .SS """capture_start"""
.el .SS "\f(CWcapture_start\fP"
.IX Subsection "capture_start"
.Vb 2
\&    my $capture_start = $mt\->capture_start;
\&    $mt               = $mt\->capture_start(\*(Aq{\*(Aq);
.Ve
.ie n .SS """code"""
.el .SS "\f(CWcode\fP"
.IX Subsection "code"
.Vb 2
\&    my $code = $mt\->code;
\&    $mt      = $mt\->code($code);
.Ve
.ie n .SS """comment_mark"""
.el .SS "\f(CWcomment_mark\fP"
.IX Subsection "comment_mark"
.Vb 2
\&    my $comment_mark = $mt\->comment_mark;
\&    $mt              = $mt\->comment_mark(\*(Aq#\*(Aq);
.Ve
.ie n .SS """encoding"""
.el .SS "\f(CWencoding\fP"
.IX Subsection "encoding"
.Vb 2
\&    my $encoding = $mt\->encoding;
\&    $mt          = $mt\->encoding(\*(AqUTF\-8\*(Aq);
.Ve
.ie n .SS """escape_mark"""
.el .SS "\f(CWescape_mark\fP"
.IX Subsection "escape_mark"
.Vb 2
\&    my $escape_mark = $mt\->escape_mark;
\&    $mt             = $mt\->escape_mark(\*(Aq=\*(Aq);
.Ve
.ie n .SS """expression_mark"""
.el .SS "\f(CWexpression_mark\fP"
.IX Subsection "expression_mark"
.Vb 2
\&    my $expression_mark = $mt\->expression_mark;
\&    $mt                 = $mt\->expression_mark(\*(Aq=\*(Aq);
.Ve
.ie n .SS """line_start"""
.el .SS "\f(CWline_start\fP"
.IX Subsection "line_start"
.Vb 2
\&    my $line_start = $mt\->line_start;
\&    $mt            = $mt\->line_start(\*(Aq%\*(Aq);
.Ve
.ie n .SS """namespace"""
.el .SS "\f(CWnamespace\fP"
.IX Subsection "namespace"
.Vb 2
\&    my $namespace = $mt\->namespace;
\&    $mt           = $mt\->namespace(\*(Aqmain\*(Aq);
.Ve
.ie n .SS """prepend"""
.el .SS "\f(CWprepend\fP"
.IX Subsection "prepend"
.Vb 2
\&    my $code = $mt\->prepend;
\&    $mt      = $mt\->prepend(\*(Aqmy $self = shift;\*(Aq);
.Ve
.ie n .SS """tag_start"""
.el .SS "\f(CWtag_start\fP"
.IX Subsection "tag_start"
.Vb 2
\&    my $tag_start = $mt\->tag_start;
\&    $mt           = $mt\->tag_start(\*(Aq<%\*(Aq);
.Ve
.ie n .SS """tag_end"""
.el .SS "\f(CWtag_end\fP"
.IX Subsection "tag_end"
.Vb 2
\&    my $tag_end = $mt\->tag_end;
\&    $mt         = $mt\->tag_end(\*(Aq%>\*(Aq);
.Ve
.ie n .SS """template"""
.el .SS "\f(CWtemplate\fP"
.IX Subsection "template"
.Vb 2
\&    my $template = $mt\->template;
\&    $mt          = $mt\->template($template);
.Ve
.ie n .SS """tree"""
.el .SS "\f(CWtree\fP"
.IX Subsection "tree"
.Vb 2
\&    my $tree = $mt\->tree;
\&    $mt      = $mt\->tree($tree);
.Ve
.ie n .SS """trim_mark"""
.el .SS "\f(CWtrim_mark\fP"
.IX Subsection "trim_mark"
.Vb 2
\&    my $trim_mark = $mt\->trim_mark;
\&    $mt           = $mt\->trim_mark(\*(Aq\-\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojo::Template inherits all methods from Mojo::Base and implements the
following new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&    my $mt = Mojo::Template\->new;
.Ve
.ie n .SS """build"""
.el .SS "\f(CWbuild\fP"
.IX Subsection "build"
.Vb 1
\&    $mt = $mt\->build;
.Ve
.ie n .SS """compile"""
.el .SS "\f(CWcompile\fP"
.IX Subsection "compile"
.Vb 1
\&    my $exception = $mt\->compile;
.Ve
.ie n .SS """interpret"""
.el .SS "\f(CWinterpret\fP"
.IX Subsection "interpret"
.Vb 2
\&    my $output = $mt\->interpret;
\&    my $output = $mt\->interpret(@arguments);
.Ve
.ie n .SS """parse"""
.el .SS "\f(CWparse\fP"
.IX Subsection "parse"
.Vb 1
\&    $mt = $mt\->parse($template);
.Ve
.ie n .SS """render"""
.el .SS "\f(CWrender\fP"
.IX Subsection "render"
.Vb 2
\&    my $output = $mt\->render($template);
\&    my $output = $mt\->render($template, @arguments);
.Ve
.ie n .SS """render_file"""
.el .SS "\f(CWrender_file\fP"
.IX Subsection "render_file"
.Vb 2
\&    my $output = $mt\->render_file($template_file);
\&    my $output = $mt\->render_file($template_file, @arguments);
.Ve
.ie n .SS """render_file_to_file"""
.el .SS "\f(CWrender_file_to_file\fP"
.IX Subsection "render_file_to_file"
.Vb 4
\&    my $exception = $mt\->render_file_to_file($template_file, $output_file);
\&    my $exception = $mt\->render_file_to_file(
\&        $template_file, $output_file, @arguments
\&    );
.Ve
.ie n .SS """render_to_file"""
.el .SS "\f(CWrender_to_file\fP"
.IX Subsection "render_to_file"
.Vb 4
\&    my $exception = $mt\->render_to_file($template, $output_file);
\&    my $exception = $mt\->render_to_file(
\&        $template, $output_file, @arguments
\&    );
.Ve
