.\" Automatically generated by Pod::Man 2.1801 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "String::Random 3pm"
.TH String::Random 3pm "2010-01-24" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
String::Random \- Perl module to generate random strings based on a pattern
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use String::Random;
\&  $foo = new String::Random;
\&  print $foo\->randregex(\*(Aq\ed\ed\ed\*(Aq); # Prints 3 random digits
\&  print $foo\->randpattern("...");  # Prints 3 random printable characters
.Ve
.PP
\&\fIor\fR
.PP
.Vb 3
\&  use String::Random qw(random_regex random_string);
\&  print random_regex(\*(Aq\ed\ed\ed\*(Aq); # Also prints 3 random digits
\&  print random_string("...");   # Also prints 3 random printable characters
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module makes it trivial to generate random strings.
.PP
As an example, let's say you are writing a script that needs to generate a
random password for a user.  The relevant code might look something like
this:
.PP
.Vb 3
\&  use String::Random;
\&  $pass = new String::Random;
\&  print "Your password is ", $pass\->randpattern("CCcc!ccn"), "\en";
.Ve
.PP
This would output something like this:
.PP
.Vb 1
\&  Your password is UDwp$tj5
.Ve
.PP
If you are more comfortable dealing with regular expressions, the following
code would have a similar result:
.PP
.Vb 4
\&  use String::Random;
\&  $pass = new String::Random;
\&  print "Your password is ",
\&      $pass\->randregex(\*(Aq[A\-Z]{2}[a\-z]{2}.[a\-z]{2}\ed\*(Aq), "\en";
.Ve
.SS "Patterns"
.IX Subsection "Patterns"
The pre-defined patterns (for use with \f(CW\*(C`randpattern()\*(C'\fR and \f(CW\*(C`random_pattern()\*(C'\fR)
are as follows:
.PP
.Vb 7
\&  c        Any lowercase character [a\-z]
\&  C        Any uppercase character [A\-Z]
\&  n        Any digit [0\-9]
\&  !        A punctuation character [~\`!@$%^&*()\-_+={}[]|\e:;"\*(Aq.<>?/#,]
\&  .        Any of the above
\&  s        A "salt" character [A\-Za\-z0\-9./]
\&  b        Any binary data
.Ve
.PP
These can be modified, but if you need a different pattern it is better to
create another pattern, possibly using one of the pre-defined as a base.
For example, if you wanted a pattern \f(CW\*(C`A\*(C'\fR that contained all upper and lower
case letters (\f(CW\*(C`[A\-Za\-z]\*(C'\fR), the following would work:
.PP
.Vb 2
\&  $foo = new String::Random;
\&  $foo\->{\*(AqA\*(Aq} = [ \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq ];
.Ve
.PP
\&\fIor\fR
.PP
.Vb 2
\&  $foo = new String::Random;
\&  $foo\->{\*(AqA\*(Aq} = [ @{$foo\->{\*(AqC\*(Aq}}, @{$foo\->{\*(Aqc\*(Aq}} ];
.Ve
.PP
The random_string function, described below, has an alternative interface
for adding patterns.
.SS "Methods"
.IX Subsection "Methods"
.IP "new" 8
.IX Item "new"
.PD 0
.IP "new max => \fInumber\fR" 8
.IX Item "new max => number"
.PD
Create a new String::Random object.
.Sp
Optionally a parameter \f(CW\*(C`max\*(C'\fR can be included to specify the maximum number
of characters to return for \f(CW\*(C`*\*(C'\fR and other regular expression patters that
don't return a fixed number of characters.
.IP "randpattern \s-1LIST\s0" 8
.IX Item "randpattern LIST"
The randpattern method returns a random string based on the concatenation
of all the pattern strings in the list.
.Sp
It will return a list of random strings corresponding to the pattern
strings when used in list context.
.IP "randregex \s-1LIST\s0" 8
.IX Item "randregex LIST"
The randregex method returns a random string that will match the regular
expression passed in the list argument.
.Sp
Please note that the arguments to randregex are not real regular
expressions.  Only a small subset of regular expression syntax is actually
supported.  So far, the following regular expression elements are
supported:
.Sp
.Vb 10
\&  \ew    Alphanumeric + "_".
\&  \ed    Digits.
\&  \eW    Printable characters other than those in \ew.
\&  \eD    Printable characters other than those in \ed.
\&  .     Printable characters.
\&  []    Character classes.
\&  {}    Repetition.
\&  *     Same as {0,}.
\&  ?     Same as {0,1}.
\&  +     Same as {1,}.
.Ve
.Sp
Regular expression support is still somewhat incomplete.  Currently special
characters inside [] are not supported (with the exception of \*(L"\-\*(R" to denote
ranges of characters).  The parser doesn't care for spaces in the \*(L"regular
expression\*(R" either.
.SS "Functions"
.IX Subsection "Functions"
.IP "random_string \s-1PATTERN\s0,LIST" 8
.IX Item "random_string PATTERN,LIST"
.PD 0
.IP "random_string \s-1PATTERN\s0" 8
.IX Item "random_string PATTERN"
.PD
When called with a single scalar argument, random_string returns a random
string using that scalar as a pattern.  Optionally, references to lists
containing other patterns can be passed to the function.  Those lists will
be used for 0 through 9 in the pattern (meaning the maximum number of lists
that can be passed is 10).  For example, the following code:
.Sp
.Vb 3
\&  print random_string("0101",
\&                      ["a", "b", "c"],
\&                      ["d", "e", "f"]), "\en";
.Ve
.Sp
would print something like this:
.Sp
.Vb 1
\&  cebd
.Ve
.SH "BUGS"
.IX Header "BUGS"
This is Bug Free(\s-1TM\s0) code.  (At least until somebody finds one...)
.SH "AUTHOR"
.IX Header "AUTHOR"
Steven Pritchard <steve@silug.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
