.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Controller 3"
.TH Mojolicious::Controller 3 "2010-01-27" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Controller \- Controller Base Class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base \*(AqMojolicious::Controller\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicous::Controller is the base class for your Mojolicious
controllers.
It is also the default controller class for Mojolicious unless you set
\&\f(CW\*(C`controller_class\*(C'\fR in your application.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojolicious::Controller inherits all attributes from
MojoX::Dispatcher::Routes::Controller.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Controller inherits all methods from
MojoX::Dispatcher::Routes::Controller and implements the following new
ones.
.ie n .SS """client"""
.el .SS "\f(CWclient\fP"
.IX Subsection "client"
.Vb 1
\&    my $client = $c\->client;
.Ve
.PP
A Mojo::Client prepared for the current environment.
.ie n .SS """finish"""
.el .SS "\f(CWfinish\fP"
.IX Subsection "finish"
.Vb 1
\&    $c\->finish;
.Ve
.PP
Similar to \f(CW\*(C`resume\*(C'\fR but will also trigger automatic rendering and the
\&\f(CW\*(C`after_dispatch\*(C'\fR plugin hook, which would normally get disabled once a
request gets paused.
For WebSockets it will gracefully end the connection.
.ie n .SS """helper"""
.el .SS "\f(CWhelper\fP"
.IX Subsection "helper"
.Vb 2
\&    $c\->helper(\*(Aqfoo\*(Aq);
\&    $c\->helper(foo => 23);
.Ve
.PP
Directly call a Mojolicious helper, see
Mojolicious::Plugin::DefaultHelpers for a list of helpers that are always
available.
.ie n .SS """pause"""
.el .SS "\f(CWpause\fP"
.IX Subsection "pause"
.Vb 1
\&    $c\->pause;
.Ve
.PP
Pause transaction associated with this request, used for asynchronous web
applications.
Note that automatic rendering and some plugins that do state changing
operations inside the \f(CW\*(C`after_dispatch\*(C'\fR hook won't work if you pause a
transaction.
.ie n .SS """receive_message"""
.el .SS "\f(CWreceive_message\fP"
.IX Subsection "receive_message"
.Vb 1
\&    $c\->receive_message(sub {...});
.Ve
.PP
Receive messages via WebSocket, only works if there is currently a WebSocket
connection in progress.
.PP
.Vb 3
\&    $c\->receive_message(sub {
\&        my ($self, $message) = @_
\&    });
.Ve
.ie n .SS """redirect_to"""
.el .SS "\f(CWredirect_to\fP"
.IX Subsection "redirect_to"
.Vb 4
\&    $c = $c\->redirect_to(\*(Aqnamed\*(Aq);
\&    $c = $c\->redirect_to(\*(Aqnamed\*(Aq, foo => \*(Aqbar\*(Aq);
\&    $c = $c\->redirect_to(\*(Aq/path\*(Aq);
\&    $c = $c\->redirect_to(\*(Aqhttp://127.0.0.1/foo/bar\*(Aq);
.Ve
.PP
Prepare a redirect response.
.ie n .SS """render"""
.el .SS "\f(CWrender\fP"
.IX Subsection "render"
.Vb 11
\&    $c\->render;
\&    $c\->render(controller => \*(Aqfoo\*(Aq, action => \*(Aqbar\*(Aq);
\&    $c\->render({controller => \*(Aqfoo\*(Aq, action => \*(Aqbar\*(Aq});
\&    $c\->render(text => \*(AqHello!\*(Aq);
\&    $c\->render(template => \*(Aqindex\*(Aq);
\&    $c\->render(template => \*(Aqfoo/index\*(Aq);
\&    $c\->render(template => \*(Aqindex\*(Aq, format => \*(Aqhtml\*(Aq, handler => \*(Aqepl\*(Aq);
\&    $c\->render(handler => \*(Aqsomething\*(Aq);
\&    $c\->render(\*(Aqfoo/bar\*(Aq);
\&    $c\->render(\*(Aqfoo/bar\*(Aq, format => \*(Aqhtml\*(Aq);
\&    $c\->render(\*(Aqfoo/bar\*(Aq, {format => \*(Aqhtml\*(Aq});
.Ve
.PP
This is a wrapper around MojoX::Renderer exposing pretty much all
functionality provided by it.
It will set a default template to use based on the controller and action name
or fall back to the route name.
You can call it with a hash of options which can be preceded by an optional
template name.
.ie n .SS """render_exception"""
.el .SS "\f(CWrender_exception\fP"
.IX Subsection "render_exception"
.Vb 1
\&    $c\->render_exception($e);
.Ve
.PP
Render the exception template \f(CW\*(C`exception.html.$handler\*(C'\fR.
Will set the status code to \f(CW500\fR meaning \f(CW\*(C`Internal Server Error\*(C'\fR.
Takes a Mojo::Exception object and will fall back to a rendering a static
\&\f(CW500\fR page using MojoX::Renderer::Static.
.ie n .SS """render_inner"""
.el .SS "\f(CWrender_inner\fP"
.IX Subsection "render_inner"
.Vb 3
\&    my $output = $c\->render_inner;
\&    my $output = $c\->render_inner(\*(Aqcontent\*(Aq);
\&    my $output = $c\->render_inner(content => \*(AqHello world!\*(Aq);
.Ve
.PP
Contains partial rendered templates, used for the renderers \f(CW\*(C`layout\*(C'\fR and
\&\f(CW\*(C`extends\*(C'\fR features.
.ie n .SS """render_json"""
.el .SS "\f(CWrender_json\fP"
.IX Subsection "render_json"
.Vb 2
\&    $c\->render_json({foo => \*(Aqbar\*(Aq});
\&    $c\->render_json([1, 2, \-3]);
.Ve
.PP
Render a data structure as \s-1JSON\s0.
.ie n .SS """render_not_found"""
.el .SS "\f(CWrender_not_found\fP"
.IX Subsection "render_not_found"
.Vb 1
\&    $c\->render_not_found;
.Ve
.PP
Render the not found template \f(CW\*(C`not_found.html.$handler\*(C'\fR.
Also sets the response status code to \f(CW404\fR, will fall back to a rendering a
static \f(CW404\fR page using MojoX::Renderer::Static.
.ie n .SS """render_partial"""
.el .SS "\f(CWrender_partial\fP"
.IX Subsection "render_partial"
.Vb 2
\&    my $output = $c\->render_partial;
\&    my $output = $c\->render_partial(action => \*(Aqfoo\*(Aq);
.Ve
.PP
Same as \f(CW\*(C`render\*(C'\fR but returns the rendered result.
.ie n .SS """render_static"""
.el .SS "\f(CWrender_static\fP"
.IX Subsection "render_static"
.Vb 1
\&    $c\->render_static(\*(Aqimages/logo.png\*(Aq);
.Ve
.PP
Render a static asset using MojoX::Dispatcher::Static.
.ie n .SS """render_text"""
.el .SS "\f(CWrender_text\fP"
.IX Subsection "render_text"
.Vb 2
\&    $c\->render_text(\*(AqHello World!\*(Aq);
\&    $c\->render_text(\*(AqHello World\*(Aq, layout => \*(Aqgreen\*(Aq);
.Ve
.PP
Render the givent content as plain text.
.ie n .SS """resume"""
.el .SS "\f(CWresume\fP"
.IX Subsection "resume"
.Vb 1
\&    $c\->resume;
.Ve
.PP
Resume transaction associated with this request, used for asynchronous web
applications.
.ie n .SS """send_message"""
.el .SS "\f(CWsend_message\fP"
.IX Subsection "send_message"
.Vb 1
\&    $c\->send_message(\*(AqHi there!\*(Aq);
.Ve
.PP
Send a message via WebSocket, only works if there is currently a WebSocket
connection in progress.
.ie n .SS """url_for"""
.el .SS "\f(CWurl_for\fP"
.IX Subsection "url_for"
.Vb 3
\&    my $url = $c\->url_for;
\&    my $url = $c\->url_for(controller => \*(Aqbar\*(Aq, action => \*(Aqbaz\*(Aq);
\&    my $url = $c\->url_for(\*(Aqnamed\*(Aq, controller => \*(Aqbar\*(Aq, action => \*(Aqbaz\*(Aq);
.Ve
.PP
Generate a Mojo::URL for the current or a named route.
