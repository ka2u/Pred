.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MojoX::Routes 3"
.TH MojoX::Routes 3 "2010-01-25" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MojoX::Routes \- Routes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MojoX::Routes;
\&
\&    my $routes = MojoX::Routes\->new;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MojoX::Routes is a routes implementation.
.SS "\s-1ATTRIBUTES\s0"
.IX Subsection "ATTRIBUTES"
MojoX::Routes implements the following attributes.
.ie n .SS """block"""
.el .SS "\f(CWblock\fP"
.IX Subsection "block"
.Vb 2
\&    my $block = $routes\->block;
\&    $routes   = $routes\->block(1);
.Ve
.ie n .SS """children"""
.el .SS "\f(CWchildren\fP"
.IX Subsection "children"
.Vb 2
\&    my $children = $routes\->children;
\&    $routes      = $routes\->children([MojoX::Routes\->new]);
.Ve
.ie n .SS """conditions"""
.el .SS "\f(CWconditions\fP"
.IX Subsection "conditions"
.Vb 2
\&    my $conditions  = $routes\->conditions;
\&    $routes         = $routes\->conditions([foo => qr/\ew+/]);
.Ve
.ie n .SS """dictionary"""
.el .SS "\f(CWdictionary\fP"
.IX Subsection "dictionary"
.Vb 2
\&    my $dictionary = $routes\->dictionary;
\&    $routes        = $routes\->dictionary({foo => sub { ... }});
.Ve
.ie n .SS """inline"""
.el .SS "\f(CWinline\fP"
.IX Subsection "inline"
.Vb 2
\&    my $inline = $routes\->inline;
\&    $routes    = $routes\->inline(1);
.Ve
.ie n .SS """name"""
.el .SS "\f(CWname\fP"
.IX Subsection "name"
.Vb 2
\&    my $name = $routes\->name;
\&    $routes  = $routes\->name(\*(Aqfoo\*(Aq);
.Ve
.ie n .SS """parent"""
.el .SS "\f(CWparent\fP"
.IX Subsection "parent"
.Vb 2
\&    my $parent = $routes\->parent;
\&    $routes    = $routes\->parent(MojoX::Routes\->new);
.Ve
.ie n .SS """pattern"""
.el .SS "\f(CWpattern\fP"
.IX Subsection "pattern"
.Vb 2
\&    my $pattern = $routes\->pattern;
\&    $routes     = $routes\->pattern(MojoX::Routes::Pattern\->new);
.Ve
.SH "METHODS"
.IX Header "METHODS"
MojoX::Routes inherits all methods from Mojo::Base and implements the
follwing the ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 2
\&    my $routes = MojoX::Routes\->new;
\&    my $routes = MojoX::Routes\->new(\*(Aq/:controller/:action\*(Aq);
.Ve
.ie n .SS """add_condition"""
.el .SS "\f(CWadd_condition\fP"
.IX Subsection "add_condition"
.Vb 1
\&    $routes = $routes\->add_condition(foo => sub { ... });
.Ve
.ie n .SS """bridge"""
.el .SS "\f(CWbridge\fP"
.IX Subsection "bridge"
.Vb 2
\&    my $bridge = $routes\->bridge;
\&    my $bridge = $routes\->bridge(\*(Aq/:controller/:action\*(Aq);
.Ve
.ie n .SS """find_route"""
.el .SS "\f(CWfind_route\fP"
.IX Subsection "find_route"
.Vb 1
\&    my $route = $routes\->find_route(\*(Aqsome_route\*(Aq);
.Ve
.ie n .SS """is_endpoint"""
.el .SS "\f(CWis_endpoint\fP"
.IX Subsection "is_endpoint"
.Vb 1
\&    my $is_endpoint = $routes\->is_endpoint;
.Ve
.ie n .SS """match"""
.el .SS "\f(CWmatch\fP"
.IX Subsection "match"
.Vb 3
\&    $match = $routes\->match($match);
\&    my $match = $routes\->match(\*(Aq/foo/bar\*(Aq);
\&    my $match = $routes\->match(get => \*(Aq/foo/bar\*(Aq);
.Ve
.ie n .SS """over"""
.el .SS "\f(CWover\fP"
.IX Subsection "over"
.Vb 2
\&    $routes = $routes\->over(foo => qr/\ew+/);
\&    $routes = $routes\->over({foo => qr/\ew+/});
.Ve
.ie n .SS """parse"""
.el .SS "\f(CWparse\fP"
.IX Subsection "parse"
.Vb 1
\&    $routes = $routes\->parse(\*(Aq/:controller/:action\*(Aq);
.Ve
.ie n .SS """route"""
.el .SS "\f(CWroute\fP"
.IX Subsection "route"
.Vb 1
\&    my $route = $routes\->route(\*(Aq/:c/:a\*(Aq, a => qr/\ew+/);
.Ve
.ie n .SS """to"""
.el .SS "\f(CWto\fP"
.IX Subsection "to"
.Vb 6
\&    my $to  = $routes\->to;
\&    $routes = $routes\->to(action => \*(Aqfoo\*(Aq);
\&    $routes = $routes\->to({action => \*(Aqfoo\*(Aq});
\&    $routes = $routes\->to(\*(Aqcontroller#action\*(Aq);
\&    $routes = $routes\->to(\*(Aqcontroller#action\*(Aq, foo => \*(Aqbar\*(Aq);
\&    $routes = $routes\->to(\*(Aqcontroller#action\*(Aq, {foo => \*(Aqbar\*(Aq});
.Ve
.ie n .SS """to_string"""
.el .SS "\f(CWto_string\fP"
.IX Subsection "to_string"
.Vb 1
\&    my $string = $routes\->to_string;
.Ve
.ie n .SS """url_for"""
.el .SS "\f(CWurl_for\fP"
.IX Subsection "url_for"
.Vb 2
\&    my $url = $routes\->url_for($url);
\&    my $url = $routes\->url_for($url, {foo => \*(Aqbar\*(Aq});
.Ve
.ie n .SS """via"""
.el .SS "\f(CWvia\fP"
.IX Subsection "via"
.Vb 3
\&    $routes = $routes\->via(\*(Aqget\*(Aq);
\&    $routes = $routes\->via(qw/get post/);
\&    $routes = $routes\->via([qw/get post/]);
.Ve
.ie n .SS """waypoint"""
.el .SS "\f(CWwaypoint\fP"
.IX Subsection "waypoint"
.Vb 1
\&    my $route = $routes\->waypoint(\*(Aq/:c/:a\*(Aq, a => qr/\ew+/);
.Ve
