.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Model::Schema 3"
.TH Data::Model::Schema 3 "2010-01-18" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Model::Schema \- Schema DSL for Data::Model
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package Your::Model;
\&  use base \*(AqData::Model\*(Aq;
\&  use Data::Model::Schema;
\&  use Data::Model::Driver::DBI;
\&  
\&  my $dbfile = \*(Aq/foo/bar.db\*(Aq;
\&  my $driver = Data::Model::Driver::DBI\->new(
\&      dsn => "dbi:SQLite:dbname=$dbfile",
\&  );
\&  base_driver( $driver ); # set the storage driver for Your::Model
\&
\&
\&  install_model tweet => schema { # CREATE TABLE tweet (
\&    key \*(Aqid\*(Aq; # primary key
\&    index index_name [qw/ user_id at /]; # index index_name(user_id, at);
\&
\&    column id
\&        => int => {
\&            auto_increment => 1,
\&            required       => 1,
\&            unsigned       => 1,
\&        }; # id   UNSIGNED INT NOT NULL AUTO_INCREMENT,
\&
\&    column user_id
\&        => int => {
\&            required       => 1,
\&            unsigned       => 1,
\&        }; # user_id   UNSIGNED INT NOT NULL,
\&
\&    column at
\&        => int => {
\&            required       => 1,
\&            default        => sub { time() },
\&            unsigned       => 1,
\&        }; # at   UNSIGNED INT NOT NULL, # If it is empty at the time of insert   time() is used.
\&
\&    utf8_column body # append to auto utf8 inflating
\&        => varchar => {
\&            required       => 1,
\&            size           => 140,
\&            default        => \*(Aq\-\*(Aq,
\&        }; # body   VARCHAR(140) NOT NULL DEFAULT\*(Aq\-\*(Aq,
\&
\&
\&    column field_name
\&        => char => {
\&            default    => \*(Aqaaa\*(Aq, # default value
\&            auto_increment => 1, # auto_increment
\&            inflate => sub { unpack("H*", $_[0]) }, # inflating by original function
\&            deflate => sub { pack("H*", $_[0]) },   # deflating by original function
\&        };
\&
\&    column field_name_2
\&        => char => {
\&            inflate => \*(AqURI\*(Aq, # use URI inflate see L<Data::Model::Schema::Inflate>
\&            deflate => \*(AqURI\*(Aq, # use URI deflate see L<Data::Model::Schema::Inflate>
\&        };
\&
\&    columns qw/ foo bar /; # create columns uses default config
\&};
.Ve
.SH "GLOBAL DSL"
.IX Header "GLOBAL DSL"
.SS "install_model, schema"
.IX Subsection "install_model, schema"
.Vb 1
\&  model name and it schema is set up.
\&
\&  install_model model_name schema {
\&  };
.Ve
.SS "base_driver"
.IX Subsection "base_driver"
set driver ( Data::Model::Driver::* ) for current package's default.
.SS "column_sugar"
.IX Subsection "column_sugar"
column_sugar promotes reuse of a schema definition.
.PP
see head1 \s-1COLUMN\s0 \s-1SUGAR\s0
.SH "SCHEMA DSL"
.IX Header "SCHEMA DSL"
.SS "driver"
.IX Subsection "driver"
driver used only in install_model of current.
.PP
.Vb 4
\&  install_model local_driver => schema {
\&      my $driver = Data::Mode::Driver::DBI\->new( dsn => \*(AqDBI:SQLite:\*(Aq );
\&      driver($driver);
\&   }
.Ve
.SS "column"
.IX Subsection "column"
It is a column definition.
.PP
.Vb 1
\&  column column_name => column_type => \e%options;
.Ve
.PP
column_name puts in the column name of \s-1SQL\s0 schema.
.PP
column_type puts in the column type of \s-1SQL\s0 schema. ( \s-1INT\s0 \s-1CHAR\s0 \s-1BLOB\s0 ... )
.SS "columns"
.IX Subsection "columns"
some columns are set up. However, options cannot be set.
.SS "utf8_column"
.IX Subsection "utf8_column"
column with utf8 inflated.
.SS "utf8_columns"
.IX Subsection "utf8_columns"
columns with utf8 inflated.
.SS "alias_column"
.IX Subsection "alias_column"
alias is attached to a specific column.
.PP
It is helpful. I can use, when leaving original data and inflateing.
.PP
.Vb 10
\&    { package Name; use Moose; has \*(Aqname\*(Aq => ( is => \*(Aqrw\*(Aq ); }
\&    # in schema 
\&    columns qw( name nickname );
\&    alias_column name     => \*(Aqname_name\*(Aq;
\&    alias_column nickname => \*(Aqnickname_name\*(Aq
\&        => {
\&            inflate => sub {
\&                my $value = shift;
\&                Name\->new( name => $value );
\&            }
\&
\&    # in your script
\&    is $row\->nickname, $row\->nickname_name\->name;
.Ve
.SS "key"
.IX Subsection "key"
set the primary key.
Unless it specifies key, it does not move by lookup and lookup_multi.
.PP
.Vb 2
\&  key \*(Aqid\*(Aq;
\&  key [qw/ id sub_id /]; # multiple key
.Ve
.SS "index"
.IX Subsection "index"
.Vb 2
\&  index \*(Aqname\*(Aq; # index name(name);
\&  index name => [qw/ name name2 /]; # index name(name, name2)
.Ve
.SS "unique"
.IX Subsection "unique"
.Vb 2
\&  unique \*(Aqname\*(Aq; # unique name(name);
\&  unique name => [qw/ name name2 /]; # unique name(name, name2)
.Ve
.SS "add_method"
.IX Subsection "add_method"
A method is added to Row class which install_model created.
.PP
.Vb 4
\&  add_method show_name => sub {
\&      my $row = shift;
\&      printf "Show %s\en", $row\->name;
\&  };
\&  
\&  $row\->name(\*(Aqyappo\*(Aq);
\&  $row\->show_name; # print "Show yappo\en"
.Ve
.SS "schema_options"
.IX Subsection "schema_options"
some option to schema is added.
.PP
It is used when using InnoDB in MySQL.
.PP
.Vb 3
\&  schema_options create_sql_attributes => {
\&      mysql => \*(AqTYPE=InnoDB\*(Aq,
\&  };
.Ve
.SH "COLUMN OPTIONS"
.IX Header "COLUMN OPTIONS"
The option which can be used in a column definition.
.PP
Pasted the definition of ParamsValidate. It writes later.
.SS "size"
.IX Subsection "size"
.Vb 5
\&                size   => {
\&                    type     => SCALAR,
\&                    regex    => qr/\eA[0\-9]+\ez/,
\&                    optional => 1,
\&                },
.Ve
.SS "required"
.IX Subsection "required"
.Vb 4
\&                required   => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "null"
.IX Subsection "null"
.Vb 4
\&                null       => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "signed"
.IX Subsection "signed"
.Vb 4
\&                signed     => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "unsigned"
.IX Subsection "unsigned"
.Vb 4
\&                unsigned   => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "decimals"
.IX Subsection "decimals"
.Vb 4
\&                decimals   => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "zerofill"
.IX Subsection "zerofill"
.Vb 4
\&                zerofill   => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "binary"
.IX Subsection "binary"
.Vb 4
\&                binary     => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "ascii"
.IX Subsection "ascii"
.Vb 4
\&                ascii      => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "unicode"
.IX Subsection "unicode"
.Vb 4
\&                unicode    => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "default"
.IX Subsection "default"
.Vb 4
\&                default    => {
\&                    type     => SCALAR | CODEREF,
\&                    optional => 1,
\&                },
.Ve
.SS "auto_increment"
.IX Subsection "auto_increment"
.Vb 4
\&                auto_increment => {
\&                    type     => BOOLEAN,
\&                    optional => 1,
\&                },
.Ve
.SS "inflate"
.IX Subsection "inflate"
.Vb 4
\&                inflate => {
\&                    type     => SCALAR | CODEREF,
\&                    optional => 1,
\&                },
.Ve
.SS "deflate"
.IX Subsection "deflate"
.Vb 4
\&                deflate => {
\&                    type     => SCALAR | CODEREF,
\&                    optional => 1,
\&                },
.Ve
.SH "COLUMN SUGAR"
.IX Header "COLUMN SUGAR"
\&\s-1UNDOCUMENTED\s0
.PP
.Vb 5
\&  package Mock::ColumnSugar;
\&  use strict;
\&  use warnings;
\&  use base \*(AqData::Model\*(Aq;
\&  use Data::Model::Schema sugar => \*(Aqcolumn_sugar\*(Aq;
\&  
\&  column_sugar \*(Aqauthor.id\*(Aq
\&      => \*(Aqint\*(Aq => +{
\&          unsigned => 1,
\&          required => 1, # we can used to require or required
\&      };
\&  column_sugar \*(Aqauthor.name\*(Aq
\&      => \*(Aqvarchar\*(Aq => +{
\&          size    => 128,
\&          require => 1,
\&      };
\&  
\&  column_sugar \*(Aqbook.id\*(Aq
\&      => \*(Aqint\*(Aq => +{
\&          unsigned => 1,
\&          require  => 1,
\&      };
\&  column_sugar \*(Aqbook.title\*(Aq
\&      => \*(Aqvarchar\*(Aq => +{
\&          size    => 255,
\&          require => 1,
\&      };
\&  column_sugar \*(Aqbook.description\*(Aq
\&      => \*(Aqtext\*(Aq => +{
\&          require => 1,
\&          default => \*(Aqnot yet writing\*(Aq
\&      };
\&  column_sugar \*(Aqbook.recommend\*(Aq
\&      => \*(Aqtext\*(Aq;
\&  
\&  
\&  install_model author => schema {
\&      driver $main::DRIVER;
\&      key \*(Aqid\*(Aq;
\&  
\&      column \*(Aqauthor.id\*(Aq => { auto_increment => 1 }; # column name is id
\&      column \*(Aqauthor.name\*(Aq; # column name is name
\&  };
\&  
\&  install_model book => schema {
\&      driver $main::DRIVER;
\&      key \*(Aqid\*(Aq;
\&      index \*(Aqauthor_id\*(Aq;
\&  
\&      column \*(Aqbook.id\*(Aq   => { auto_increment => 1 }; # column name is id
\&      column \*(Aqauthor.id\*(Aq; # column name is author_id
\&      column \*(Aqauthor.id\*(Aq => \*(Aqsub_author_id\*(Aq => { required => 0 }; # column name is sub_author_id
\&      column \*(Aqbook.title\*(Aq; # column name is title
\&      column \*(Aqbook.description\*(Aq; # column name is description
\&      column \*(Aqbook.recommend\*(Aq; # column name is recommend
\&  };
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kazuhiro Osawa <yappo <at> shibuya <dA\*~Xt> pl>
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
