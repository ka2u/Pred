.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MojoX::Session 3"
.TH MojoX::Session 3 "2010-01-18" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
MojoX::Session \- Session management for Mojo
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    my $session = MojoX::Session\->new(
\&        tx        => $tx,
\&        store     => MojoX::Session::Store::Dbi\->new(dbh  => $dbh),
\&        transport => MojoX::Session::Transport::Cookie\->new,
\&        ip_match  => 1
\&    );
.Ve
.PP
.Vb 7
\&    # or
\&    my $session = MojoX::Session\->new(
\&        tx        => $tx,
\&        store     => [dbi => {dbh => $dbh}],  # use MojoX::Session::Store::Dbi
\&        transport => \(aqcookie\(aq,                # this is by default
\&        ip_match  => 1
\&    );
.Ve
.PP
.Vb 2
\&    $session\->create; # creates new session
\&    $session\->load;   # tries to find session
.Ve
.PP
.Vb 1
\&    $session\->sid; # session id
.Ve
.PP
.Vb 2
\&    $session\->data(\(aqfoo\(aq => \(aqbar\(aq); # set foo to bar
\&    $session\->data(\(aqfoo\(aq); # get foo value
.Ve
.PP
.Vb 2
\&    $session\->data(\(aqfoo\(aq => undef); # works
\&    $session\->clear(\(aqfoo\(aq); # delete foo from data
.Ve
.PP
.Vb 1
\&    $session\->flush; # writes session to the store
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
MojoX::Session is a session management for Mojo. Based on CGI::Session
and HTTP::Session but without any dependencies except the core ones.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
MojoX::Session implements the following attributes.
.ie n .Sh """tx"""
.el .Sh "\f(CWtx\fP"
.IX Subsection "tx"
.Vb 1
\&    Mojo::Transaction object
.Ve
.PP
.Vb 2
\&    my $tx = $session\->tx;
\&    $tx    = $session\->tx(Mojo::Transaction\->new);
.Ve
.ie n .Sh """store"""
.el .Sh "\f(CWstore\fP"
.IX Subsection "store"
.Vb 1
\&    Store object
.Ve
.PP
.Vb 3
\&    my $store = $session\->store;
\&    $session  = $session\->store(MojoX::Session::Store::Dbi\->new(dbh => $dbh));
\&    $session  = $session\->store([dbi => {dbh => $dbh});
.Ve
.ie n .Sh """transport"""
.el .Sh "\f(CWtransport\fP"
.IX Subsection "transport"
.Vb 1
\&    Transport to find and store session id
.Ve
.PP
.Vb 4
\&    my $transport = $session\->transport;
\&    $session
\&        = $session\->transport(MojoX::Session::Transport::Cookie\->new);
\&    $session = $session\->transport(\(aqcookie\(aq); # by default
.Ve
.ie n .Sh """ip_match"""
.el .Sh "\f(CWip_match\fP"
.IX Subsection "ip_match"
.Vb 1
\&    Check if ip matches, default is 0
.Ve
.PP
.Vb 2
\&    my $ip_match = $session\->ip_match;
\&    $ip_match    = $session\->ip_match(0);
.Ve
.ie n .Sh """expires_delta"""
.el .Sh "\f(CWexpires_delta\fP"
.IX Subsection "expires_delta"
.Vb 1
\&    Seconds until session is considered expired
.Ve
.PP
.Vb 2
\&    my $expires_delta = $session\->expires_delta;
\&    $expires_delta    = $session\->expires_delta(3600);
.Ve
.SH "METHODS"
.IX Header "METHODS"
MojoX::Session inherits all methods from Mojo::Base and implements the
following new ones.
.ie n .Sh """new"""
.el .Sh "\f(CWnew\fP"
.IX Subsection "new"
.Vb 1
\&    my $session = MojoX::Session\->new(...);
.Ve
.PP
.Vb 1
\&    Returns new L<MojoX::Session> object.
.Ve
.ie n .Sh """create"""
.el .Sh "\f(CWcreate\fP"
.IX Subsection "create"
.Vb 2
\&    my $sid = $session\->create;
\&    $session\->flush;
.Ve
.PP
Creates new session. Puts sid into the transport. Call flush if you want to
store it.
.ie n .Sh """load"""
.el .Sh "\f(CWload\fP"
.IX Subsection "load"
.Vb 2
\&    $session\->load;
\&    $session\->load($sid);
.Ve
.PP
Tries to load session from the store, gets sid from transport unless it is
provided. If sesssion is expired it will loaded also.
.ie n .Sh """flush"""
.el .Sh "\f(CWflush\fP"
.IX Subsection "flush"
.Vb 1
\&    $session\->flush;
.Ve
.PP
Flush actually writes to the store in these situations:
\&\- new session was created (inserts it);
\&\- any value was changed (updates it)
\&\- session is expired (deletes it)
.PP
Returns the value from the corresponding store method call.
.ie n .Sh """sid"""
.el .Sh "\f(CWsid\fP"
.IX Subsection "sid"
.Vb 1
\&    my $sid = $session\->sid;
.Ve
.PP
Returns session id.
.ie n .Sh """data"""
.el .Sh "\f(CWdata\fP"
.IX Subsection "data"
.Vb 7
\&    my $foo = $session\->data(\(aqfoo\(aq);
\&    $session\->data(\(aqfoo\(aq => \(aqbar\(aq);
\&    $session\->data(\(aqfoo\(aq => \(aqbar\(aq, \(aqbar\(aq => \(aqfoo\(aq);
\&    $session\->data(\(aqfoo\(aq => undef);
\&    # or
\&    my $foo = $session\->data\->{foo};
\&    $session\->data\->{foo} = \(aqbar\(aq;
.Ve
.PP
Get and set values to the session.
.ie n .Sh """flash"""
.el .Sh "\f(CWflash\fP"
.IX Subsection "flash"
.Vb 4
\&    my $foo = $session\->data(\(aqfoo\(aq);
\&    $session\->data(\(aqfoo\(aq => \(aqbar\(aq);
\&    $session\->flash(\(aqfoo\(aq); # get foo and delete it from data
\&    $session\->data(\(aqfoo\(aq);  # undef
.Ve
.PP
Get value and delete it from data. Usefull when you want to store error messages
etc.
.ie n .Sh """clear"""
.el .Sh "\f(CWclear\fP"
.IX Subsection "clear"
.Vb 3
\&    $session\->clear(\(aqbar\(aq);
\&    $session\->clear;
\&    $session\->flush;
.Ve
.PP
Clear session values. Delete only one value if argument is provided.  Call flush
if you want to clear it in the store.
.ie n .Sh """expires"""
.el .Sh "\f(CWexpires\fP"
.IX Subsection "expires"
.Vb 2
\&    $session\->expires;
\&    $session\->expires(123456789);
.Ve
.PP
Get/set session expire time.
.ie n .Sh """expire"""
.el .Sh "\f(CWexpire\fP"
.IX Subsection "expire"
.Vb 2
\&    $session\->expire;
\&    $session\->flush;
.Ve
.PP
Force session to expire. Call flush if you want to remove it from the store.
.ie n .Sh """is_expired"""
.el .Sh "\f(CWis_expired\fP"
.IX Subsection "is_expired"
Check if session is expired.
.ie n .Sh """extend_expires"""
.el .Sh "\f(CWextend_expires\fP"
.IX Subsection "extend_expires"
Entend session expires time. Set it to current_time + expires_delta.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGI::Session, HTTP::Session
.SH "AUTHOR"
.IX Header "AUTHOR"
vti, \f(CW\*(C`vti@cpan.org\*(C'\fR.
.SH "CREDITS"
.IX Header "CREDITS"
David Davis
.PP
William Ono
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2008, Viacheslav Tykhanovskyi.
.PP
This program is free software, you can redistribute it and/or modify it under
the same terms as Perl 5.10.
