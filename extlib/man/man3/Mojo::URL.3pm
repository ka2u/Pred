.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::URL 3"
.TH Mojo::URL 3 "2010-01-19" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::URL \- Uniform Resource Locator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mojo::URL;
\&
\&    # Parse
\&    my $url = Mojo::URL\->new(
\&        \*(Aqhttp://sri:foobar@kraih.com:3000/foo/bar?foo=bar#23\*(Aq
\&    );
\&    print $url\->scheme;
\&    print $url\->userinfo;
\&    print $url\->host;
\&    print $url\->port;
\&    print $url\->path;
\&    print $url\->query;
\&    print $url\->fragment;
\&
\&    # Build
\&    my $url = Mojo::URL\->new;
\&    $url\->scheme(\*(Aqhttp\*(Aq);
\&    $url\->userinfo(\*(Aqsri:foobar\*(Aq);
\&    $url\->host(\*(Aqkraih.com\*(Aq);
\&    $url\->port(3000);
\&    $url\->path\->parts(qw/foo bar/);
\&    $url\->query\->params(foo => \*(Aqbar\*(Aq);
\&    $url\->fragment(23);
\&    print "$url";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::URL implements a subset of \s-1RFC\s0 3986 for Uniform Resource Locators.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::URL implements the following attributes.
.ie n .SS """authority"""
.el .SS "\f(CWauthority\fP"
.IX Subsection "authority"
.Vb 2
\&    my $authority = $url\->autority;
\&    $url          = $url\->authority(\*(Aqroot:pass%3Bw0rd@localhost:8080\*(Aq);
.Ve
.ie n .SS """base"""
.el .SS "\f(CWbase\fP"
.IX Subsection "base"
.Vb 2
\&    my $base = $url\->base;
\&    $url     = $url\->base(Mojo::URL\->new);
.Ve
.ie n .SS """fragment"""
.el .SS "\f(CWfragment\fP"
.IX Subsection "fragment"
.Vb 2
\&    my $fragment = $url\->fragment;
\&    $url         = $url\->fragment(\*(Aqfoo\*(Aq);
.Ve
.ie n .SS """host"""
.el .SS "\f(CWhost\fP"
.IX Subsection "host"
.Vb 2
\&    my $host = $url\->host;
\&    $url     = $url\->host(\*(Aq127.0.0.1\*(Aq);
.Ve
.ie n .SS """port"""
.el .SS "\f(CWport\fP"
.IX Subsection "port"
.Vb 2
\&    my $port = $url\->port;
\&    $url     = $url\->port(8080);
.Ve
.ie n .SS """scheme"""
.el .SS "\f(CWscheme\fP"
.IX Subsection "scheme"
.Vb 2
\&    my $scheme = $url\->scheme;
\&    $url       = $url\->scheme(\*(Aqhttp\*(Aq);
.Ve
.ie n .SS """userinfo"""
.el .SS "\f(CWuserinfo\fP"
.IX Subsection "userinfo"
.Vb 2
\&    my $userinfo = $url\->userinfo;
\&    $url         = $url\->userinfo(\*(Aqroot:pass%3Bw0rd\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojo::URL inherits all methods from Mojo::Base and implements the
following new ones.
.ie n .SS """new"""
.el .SS "\f(CWnew\fP"
.IX Subsection "new"
.Vb 2
\&    my $url = Mojo::URL\->new;
\&    my $url = Mojo::URL\->new(\*(Aqhttp://127.0.0.1:3000/foo?f=b&baz=2#foo\*(Aq);
.Ve
.ie n .SS """clone"""
.el .SS "\f(CWclone\fP"
.IX Subsection "clone"
.Vb 1
\&    my $url2 = $url\->clone;
.Ve
.ie n .SS """ihost"""
.el .SS "\f(CWihost\fP"
.IX Subsection "ihost"
.Vb 2
\&    my $ihost = $url\->ihost;
\&    $url      = $url\->ihost(\*(Aqxn\-\-bcher\-kva.ch\*(Aq);
.Ve
.ie n .SS """is_abs"""
.el .SS "\f(CWis_abs\fP"
.IX Subsection "is_abs"
.Vb 1
\&    my $is_abs = $url\->is_abs;
.Ve
.ie n .SS """parse"""
.el .SS "\f(CWparse\fP"
.IX Subsection "parse"
.Vb 1
\&    $url = $url\->parse(\*(Aqhttp://127.0.0.1:3000/foo/bar?fo=o&baz=23#foo\*(Aq);
.Ve
.ie n .SS """path"""
.el .SS "\f(CWpath\fP"
.IX Subsection "path"
.Vb 3
\&    my $path = $url\->path;
\&    $url     = $url\->path(\*(Aq/foo/bar\*(Aq);
\&    $url     = $url\->path(Mojo::Path\->new);
.Ve
.ie n .SS """query"""
.el .SS "\f(CWquery\fP"
.IX Subsection "query"
.Vb 4
\&    my $query = $url\->query;
\&    $url      = $url\->query(name => \*(Aqvalue\*(Aq);
\&    $url      = $url\->query([name => \*(Aqvalue\*(Aq]);
\&    $url      = $url\->query(Mojo::Parameters\->new);
.Ve
.ie n .SS """to_abs"""
.el .SS "\f(CWto_abs\fP"
.IX Subsection "to_abs"
.Vb 2
\&    my $abs = $url\->to_abs;
\&    my $abs = $url\->to_abs(Mojo::URL\->new(\*(Aqhttp://kraih.com/foo\*(Aq));
.Ve
.ie n .SS """to_rel"""
.el .SS "\f(CWto_rel\fP"
.IX Subsection "to_rel"
.Vb 2
\&    my $rel = $url\->to_rel;
\&    my $rel = $url\->to_rel(Mojo::URL\->new(\*(Aqhttp://kraih.com/foo\*(Aq));
.Ve
.ie n .SS """to_string"""
.el .SS "\f(CWto_string\fP"
.IX Subsection "to_string"
.Vb 1
\&    my $string = $url\->to_string;
.Ve
