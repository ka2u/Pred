.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojo::Server::Daemon 3"
.TH Mojo::Server::Daemon 3 "2010-01-19" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Server::Daemon \- HTTP Server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mojo::Server::Daemon;
\&
\&    my $daemon = Mojo::Server::Daemon\->new;
\&    $daemon\->port(8080);
\&    $daemon\->run;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Server::Daemon is a simple and portable async io based \s-1HTTP\s0 server.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Server::Daemon inherits all attributes from Mojo::Server and
implements the following new ones.
.ie n .SS """group"""
.el .SS "\f(CWgroup\fP"
.IX Subsection "group"
.Vb 2
\&    my $group = $daemon\->group;
\&    $daemon   = $daemon\->group(\*(Aqusers\*(Aq);
.Ve
.ie n .SS """ioloop"""
.el .SS "\f(CWioloop\fP"
.IX Subsection "ioloop"
.Vb 2
\&    my $loop = $daemon\->ioloop;
\&    $daemon  = $daemon\->ioloop(Mojo::IOLoop\->new);
.Ve
.ie n .SS """keep_alive_timeout"""
.el .SS "\f(CWkeep_alive_timeout\fP"
.IX Subsection "keep_alive_timeout"
.Vb 2
\&    my $keep_alive_timeout = $daemon\->keep_alive_timeout;
\&    $daemon                = $daemon\->keep_alive_timeout(15);
.Ve
.ie n .SS """listen"""
.el .SS "\f(CWlisten\fP"
.IX Subsection "listen"
.Vb 2
\&    my $listen = $daemon\->listen;
\&    $daemon    = $daemon\->listen(\*(Aqhttps:localhost:3000,file:/my.sock\*(Aq);
.Ve
.ie n .SS """listen_queue_size"""
.el .SS "\f(CWlisten_queue_size\fP"
.IX Subsection "listen_queue_size"
.Vb 2
\&    my $listen_queue_size = $daemon\->listen_queue_zise;
\&    $daemon               = $daemon\->listen_queue_zise(128);
.Ve
.ie n .SS """lock_file"""
.el .SS "\f(CWlock_file\fP"
.IX Subsection "lock_file"
.Vb 2
\&    my $lock_file = $daemon\->lock_file;
\&    $daemon       = $daemon\->lock_file(\*(Aq/tmp/mojo_daemon.lock\*(Aq);
.Ve
.ie n .SS """max_clients"""
.el .SS "\f(CWmax_clients\fP"
.IX Subsection "max_clients"
.Vb 2
\&    my $max_clients = $daemon\->max_clients;
\&    $daemon         = $daemon\->max_clients(1000);
.Ve
.ie n .SS """max_keep_alive_requests"""
.el .SS "\f(CWmax_keep_alive_requests\fP"
.IX Subsection "max_keep_alive_requests"
.Vb 2
\&    my $max_keep_alive_requests = $daemon\->max_keep_alive_requests;
\&    $daemon                     = $daemon\->max_keep_alive_requests(100);
.Ve
.ie n .SS """pid_file"""
.el .SS "\f(CWpid_file\fP"
.IX Subsection "pid_file"
.Vb 2
\&    my $pid_file = $daemon\->pid_file;
\&    $daemon      = $daemon\->pid_file(\*(Aq/tmp/mojo_daemon.pid\*(Aq);
.Ve
.ie n .SS """user"""
.el .SS "\f(CWuser\fP"
.IX Subsection "user"
.Vb 2
\&    my $user = $daemon\->user;
\&    $daemon  = $daemon\->user(\*(Aqweb\*(Aq);
.Ve
.SH "METHODS"
.IX Header "METHODS"
Mojo::Server::Daemon inherits all methods from Mojo::Server and
implements the following new ones.
.ie n .SS """accept_lock"""
.el .SS "\f(CWaccept_lock\fP"
.IX Subsection "accept_lock"
.Vb 1
\&    my $lock = $daemon\->accept_lock($blocking);
.Ve
.ie n .SS """accept_unlock"""
.el .SS "\f(CWaccept_unlock\fP"
.IX Subsection "accept_unlock"
.Vb 1
\&    $daemon\->accept_unlock;
.Ve
.ie n .SS """prepare_ioloop"""
.el .SS "\f(CWprepare_ioloop\fP"
.IX Subsection "prepare_ioloop"
.Vb 1
\&    $daemon\->prepare_ioloop;
.Ve
.ie n .SS """prepare_lock_file"""
.el .SS "\f(CWprepare_lock_file\fP"
.IX Subsection "prepare_lock_file"
.Vb 1
\&    $daemon\->prepare_lock_file;
.Ve
.ie n .SS """prepare_pid_file"""
.el .SS "\f(CWprepare_pid_file\fP"
.IX Subsection "prepare_pid_file"
.Vb 1
\&    $daemon\->prepare_pid_file;
.Ve
.ie n .SS """run"""
.el .SS "\f(CWrun\fP"
.IX Subsection "run"
.Vb 1
\&    $daemon\->run;
.Ve
.ie n .SS """setuidgid"""
.el .SS "\f(CWsetuidgid\fP"
.IX Subsection "setuidgid"
.Vb 1
\&    $daemon\->setuidgid;
.Ve
