.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugins 3"
.TH Mojolicious::Plugins 3 "2010-01-25" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugins \- Plugins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Mojolicious::Plugins;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicous::Plugins is the plugin manager of Mojolicious.
In your application you will usually use it to load plugins.
To implement your own plugins see Mojolicious::Plugin and the \f(CW\*(C`add_hook\*(C'\fR
method below.
.SS "\s-1ATTRIBUTES\s0"
.IX Subsection "ATTRIBUTES"
Mojolicious::Plugins implements the following attributes.
.ie n .SS """hooks"""
.el .SS "\f(CWhooks\fP"
.IX Subsection "hooks"
.Vb 2
\&    my $hooks = $plugins\->hooks;
\&    $plugins  = $plugins\->hooks({foo => [sub {...}]});
.Ve
.PP
Hash reference containing all hooks that have been registered by loaded
plugins.
.ie n .SS """namespaces"""
.el .SS "\f(CWnamespaces\fP"
.IX Subsection "namespaces"
.Vb 2
\&    my $namespaces = $plugins\->namespaces;
\&    $plugins       = $plugins\->namespaces([\*(AqMojolicious::Plugin\*(Aq]);
.Ve
.PP
Namespaces to load plugins from.
You can add more namespaces to load application specific plugins.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugins inherits all methods from Mojo::Base and
implements the following new ones.
.ie n .SS """add_hook"""
.el .SS "\f(CWadd_hook\fP"
.IX Subsection "add_hook"
.Vb 1
\&    $plugins = $plugins\->add_hook(event => sub {...});
.Ve
.PP
Hook into an event.
The following events are available.
(Note that \f(CW\*(C`after_*\*(C'\fR hooks run in reverse order)
.IP "before_dispatch" 4
.IX Item "before_dispatch"
Runs before the dispatchers determines what action to run.
(Passed the default controller instance)
.Sp
.Vb 3
\&    $plugins\->add_hook(before_dispatch => sub {
\&        my ($self, $c) = @_;
\&    });
.Ve
.IP "after_dispatch" 4
.IX Item "after_dispatch"
Runs after the dispatchers determines what action to run.
(Passed the default controller instance)
.Sp
.Vb 3
\&    $plugins\->add_hook(after_dispatch => sub {
\&        my ($self, $c) = @_;
\&    });
.Ve
.IP "after_static_dispatch" 4
.IX Item "after_static_dispatch"
Runs after the static dispatcher determines if a static file should be
served. (Passed the default controller instance)
.Sp
.Vb 3
\&    $plugins\->add_hook(after_static_dispatch => sub {
\&        my ($self, $c) = @_;
\&    })
.Ve
.IP "after_build_tx" 4
.IX Item "after_build_tx"
Runs right after the transaction is built and before the \s-1HTTP\s0 message gets
parsed.
One usage case would be upload progress bars.
(Passed the transaction instance)
.Sp
.Vb 3
\&    $plugins\->add_hook(after_build_tx => sub {
\&        my ($self, $tx) = @_;
\&    })
.Ve
.PP
You could also add custom events by using \f(CW\*(C`run_hook\*(C'\fR and \f(CW\*(C`run_hook_reverse\*(C'\fR
in your application.
.ie n .SS """load_plugin"""
.el .SS "\f(CWload_plugin\fP"
.IX Subsection "load_plugin"
.Vb 3
\&    $plugins = $plugins\->load_plugin($app, \*(Aqsomething\*(Aq);
\&    $plugins = $plugins\->load_plugin($app, \*(Aqsomething\*(Aq, foo => 23);
\&    $plugins = $plugins\->load_plugin($app, \*(Aqsomething\*(Aq, {foo => 23});
.Ve
.PP
Load a plugin from the configured namespaces and run \f(CW\*(C`register\*(C'\fR.
Optional arguments are passed to register.
.ie n .SS """run_hook"""
.el .SS "\f(CWrun_hook\fP"
.IX Subsection "run_hook"
.Vb 2
\&    $plugins = $plugins\->run_hook(\*(Aqfoo\*(Aq);
\&    $plugins = $plugins\->run_hook(foo => 123);
.Ve
.PP
Runs a hook.
.ie n .SS """run_hook_reverse"""
.el .SS "\f(CWrun_hook_reverse\fP"
.IX Subsection "run_hook_reverse"
.Vb 2
\&    $plugins = $plugins\->run_hook_reverse(\*(Aqfoo\*(Aq);
\&    $plugins = $plugins\->run_hook_reverse(foo => 123);
.Ve
.PP
Runs a hook in reverse order.
